(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  window.HeaderView = (function(superClass) {
    extend(HeaderView, superClass);

    function HeaderView() {
      return HeaderView.__super__.constructor.apply(this, arguments);
    }

    HeaderView.prototype.events = {
      "click .mobile-header-search-toggle": "toggleSearch",
      "blur .header-search-input": "toggleSearch"
    };

    HeaderView.prototype.initialize = function() {
      if (Pacific.settings["use-logo"]) {
        this.fixWonkyLogo();
        return $(window).resize((function(_this) {
          return function() {
            return _this.fixWonkyLogo();
          };
        })(this));
      }
    };

    HeaderView.prototype.fixWonkyLogo = function() {
      var actualRatio, logo, naturalRatio, newHeight;
      if ($("html").hasClass("lt-ie9")) {
        return;
      }
      logo = this.$(".logo-retina").is(":visible") ? this.$(".logo-retina") : this.$(".logo-regular");
      naturalRatio = logo[0].naturalWidth / logo[0].naturalHeight;
      actualRatio = logo[0].width / parseInt(Pacific.settings["logo-height"], 10);
      newHeight = naturalRatio.toFixed(2) !== actualRatio.toFixed(2) ? "auto" : Pacific.settings["logo-height"];
      return this.$(".logo-retina, .logo-regular").css({
        height: newHeight
      });
    };

    HeaderView.prototype.toggleSearch = function() {
      var form;
       var form;
      if (!(document.documentElement.clientWidth > 1020)) {
        form = this.$(".header-search-form");
        if (form.hasClass("active")) {
        //  $(".mobile-header-search-toggle").css("visibility","visible");
          return form.removeClass("active");

        } else {
         // $(".mobile-header-search-toggle").css("visibility","hidden");
          return form.addClass("active").find("input").focus();

        }
      }
    };

    return HeaderView;

  })(Backbone.View);

}).call(this);

(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  window.CurrencyView = (function(superClass) {
    extend(CurrencyView, superClass);

    function CurrencyView() {
      return CurrencyView.__super__.constructor.apply(this, arguments);
    }

    CurrencyView.prototype.events = {
      "change [name=currencies]": "convertAll",
      "switch-currency": "switchCurrency",
      "reset-currency": "resetCurrency"
    };

    CurrencyView.prototype.initialize = function() {
      var cents, doubleMoney, i, j, len, len1, money, ref, ref1;
      Currency.format = Pacific.settings["currency-switcher-format"];
      Currency.money_with_currency_format = {};
      Currency.money_with_currency_format[Shop.currency] = Shop.moneyFormatCurrency;
      Currency.money_format = {};
      Currency.money_format[Shop.currency] = Shop.moneyFormat;
      this.cookieCurrency = Currency.cookie.read();
      if (this.cookieCurrency) {
        this.$("[name=currencies]").val(this.cookieCurrency);
      }
      ref = $("span.money span.money");
      for (i = 0, len = ref.length; i < len; i++) {
        doubleMoney = ref[i];
        $(doubleMoney).parents("span.money").removeClass("money");
      }
      ref1 = $("span.money");
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        money = ref1[j];
        $(money).attr("data-currency-" + Shop.currency, $(money).html());
        if (Currency.format === "money_with_currency_format") {
          cents = parseInt($(money).html().replace(/[^0-9]/g, ""), 10);
          $(money).attr("data-currency-" + Shop.currency, Shopify.formatMoney(cents, Shop.moneyFormat));
          $(money).html(Shopify.formatMoney(cents, Shop.moneyFormat));
        }
      }
      this.switchCurrency();
      return this.$(".selected-currency").text(Currency.currentCurrency);
    };

    CurrencyView.prototype.resetCurrency = function() {
      return Currency.convertAll(Shop.currency, this.$("[name=currencies]").val());
    };

    CurrencyView.prototype.switchCurrency = function() {
      if (this.cookieCurrency === null) {
        return Currency.currentCurrency = Shop.currency;
      } else if (this.$("[name=currencies]").size() && this.$("[name=currencies] option[value='" + this.cookieCurrency + "']").size() === 0) {
        Currency.currentCurrency = Shop.currency;
        return Currency.cookie.write(Shop.currency);
      } else if (this.cookieCurrency === Shop.currency) {
        return Currency.currentCurrency = Shop.currency;
      } else {
        return Currency.convertAll(Shop.currency, this.cookieCurrency);
      }
    };

    CurrencyView.prototype.convertAll = function(e, variant, selector) {
      var newCurrency;
      newCurrency = $(e.target).val();
      Currency.convertAll(Currency.currentCurrency, newCurrency);
      this.$(".selected-currency").text(Currency.currentCurrency);
      return this.cookieCurrency = newCurrency;
    };

    return CurrencyView;

  })(Backbone.View);

}).call(this);

(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  window.NavigationView = (function(superClass) {
    extend(NavigationView, superClass);

    function NavigationView() {
      return NavigationView.__super__.constructor.apply(this, arguments);
    }

    NavigationView.prototype.events = {
      "click .mobile-tier-toggle": "toggleMobileTier",
      "click .has-children > a": "changeTier",
      "click .mega-nav-breadcrumbs span": "previousTier",
      "mouseenter .mega-nav": "setMegaNav",
      "mouseout .mega-nav": "resetMegaNav"
    };

    NavigationView.prototype.initialize = function() {
      this.transitionend = (function(transition) {
        var transEndEventNames;
        transEndEventNames = {
          "-webkit-transition": "webkitTransitionEnd",
          "-moz-transition": "transitionend",
          "-o-transition": "oTransitionEnd",
          transition: "transitionend"
        };
        return transEndEventNames[transition];
      })(Modernizr.prefixed("transition"));
      this.checkDropdownWidth();
      this.setWindowWidth();
      if (this.$("li.mega-nav").length) {
        this.prepareMegaNav();
      }
      $(window).on("resize", (function(_this) {
        return function() {
          _this.setWindowWidth();
          if (_this.$("li.mega-nav").length) {
            _this.prepareMegaNav();
          }
          if (_this.$el.hasClass("mobile-visible") && _this.windowWidth > 1020) {
            _this.$el.removeClass("mobile-visible");
            return _this.resetHeights();
          }
        };
      })(this));
      return $(".mobile-navigation-toggle").on("click", (function(_this) {
        return function() {
          return _this.toggleMobileNavigation();
        };
      })(this));
    };

    NavigationView.prototype.setWindowWidth = function() {
      return this.windowWidth = document.documentElement.clientWidth;
    };

    NavigationView.prototype.checkDropdownWidth = function() {
      var i, item, itemOffset, len, ref, results;
      ref = this.$(".navigation-first-tier > .has-dropdown");
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        item = ref[i];
        item = $(item);
        if (!item.hasClass("mega-nav")) {
          itemOffset = item.offset();
          if (item.find(".navigation-second-tier").length && itemOffset.left + 200 > this.windowWidth) {
            item.addClass("alternate-drop");
          }
          if (item.find(".navigation-third-tier").length && itemOffset.left + 400 > this.windowWidth) {
            item.addClass("alternate-drop");
          }
          if (item.find(".navigation-fourth-tier").length && itemOffset.left + 600 > this.windowWidth) {
            results.push(item.addClass("alternate-drop"));
          } else {
            results.push(void 0);
          }
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    NavigationView.prototype.toggleMobileNavigation = function() {
      var firstTier, height;
      if (!this.$el.hasClass("processed")) {
        $(window).on("resize", (function(_this) {
          return function() {
            return _.debounce(function() {
              if (_this.windowWidth > 1020) {
                return _this.resetHeights();
              }
            }, 500);
          };
        })(this));
        this.$el.addClass("processed");
      }
      firstTier = this.$(".navigation-first-tier");
      if (this.$el.hasClass("mobile-visible")) {
        this.$el.removeClass("mobile-visible");
        return this.resetHeights();
      } else {
        height = this.getHiddenHeight(firstTier);
        firstTier.addClass("open");
        return setTimeout((function(_this) {
          return function() {
            _this.$el.addClass("mobile-visible");
            $(".mobile-navigation-toggle").addClass("active");
            return firstTier.height(height);
          };
        })(this), 50);
      }
    };

    NavigationView.prototype.toggleMobileTier = function(e) {
      var height, list, parent;
      e.preventDefault();
      parent = $(e.target).closest(".has-dropdown, .mega-nav, .mega-nav-item, .has-children");
      list = parent.find("> ul");
      if (parent.hasClass("open")) {
        height = list.height();
        list.parents("ul").css("height", "-=" + height);
        list.find(".open").removeClass("open").find("> ul").height("");
        if (Modernizr.csstransitions) {
          return list.height(0).one(this.transitionend, (function(_this) {
            return function() {
              return parent.removeClass("open");
            };
          })(this));
        } else {
          return parent.removeClass("open");
        }
      } else {
        height = this.getHiddenHeight(list);
        parent.addClass("open");
        list.height(height);
        return list.parents("ul").css("height", "+=" + height);
      }
    };

    NavigationView.prototype.getHiddenHeight = function(elem) {
      var height, temp;
      temp = $(elem).clone().addClass("cloned-list").appendTo(this.$el);
      height = temp.height();
      temp.remove();
      return height;
    };

    NavigationView.prototype.resetHeights = function() {
      var i, len, list, ref;
      ref = this.$("ul");
      for (i = 0, len = ref.length; i < len; i++) {
        list = ref[i];
        $(list).height("").parent().removeClass("open");
      }
      return $(".mobile-navigation-toggle").removeClass("active");
    };

    NavigationView.prototype.prepareMegaNav = function() {
      var bottomPosition, navigationWidth, toggleHeight, toggleTop;
      this.megaNavDropdown = this.$(".mega-nav-dropdown");
      if (this.windowWidth > 1020) {
        navigationWidth = this.$el.width();
        toggleTop = this.$(".mega-nav").position().top;
        toggleHeight = this.$(".mega-nav").outerHeight();
        bottomPosition = toggleTop + toggleHeight - 1;
        return this.megaNavDropdown.css({
          top: bottomPosition,
          width: navigationWidth,
          marginLeft: -(navigationWidth / 2)
        });
      } else {
        return this.megaNavDropdown.css({
          top: "",
          width: "",
          marginLeft: ""
        });
      }
    };

    NavigationView.prototype.setMegaNav = function(e) {
      var firstTierHeight;
      if (this.windowWidth < 1021) {
        return;
      }
      firstTierHeight = this.megaNavDropdown.height();
      return this.megaNavDropdown.data("first-tier-height", firstTierHeight).height(firstTierHeight);
    };

    NavigationView.prototype.resetMegaNav = function(e) {
      if (this.windowWidth < 1021) {
        return;
      }
      if (e && $(e.relatedTarget).closest(".mega-nav").length) {
        return;
      }
      this.megaNavDropdown.height(this.megaNavDropdown.data("first-tier-height"));
      return this.$(".active").removeClass("active");
    };

    NavigationView.prototype.changeTier = function(e) {
      var currentHeight, nextTier, nextTierHeight;
      if (this.windowWidth < 1021) {
        return;
      }
      e.preventDefault();
      $(e.currentTarget).addClass("working");
      nextTier = $(e.currentTarget).next("ul");
      nextTierHeight = nextTier.outerHeight();
      currentHeight = this.megaNavDropdown.height();
      if (currentHeight < nextTierHeight) {
        this.megaNavDropdown.height(nextTierHeight);
      } else {
        nextTier.css({
          "bottom": 0
        });
      }
      return $(e.currentTarget).removeClass("working").addClass("active");
    };

    NavigationView.prototype.previousTier = function(e) {
      var previousTierHeight;
      if ($(e.currentTarget).hasClass("current-tier")) {
        return;
      }
      if ($(e.currentTarget).hasClass("first-tier")) {
        this.$(".active").removeClass("active");
        this.megaNavDropdown.height(this.megaNavDropdown.data("first-tier-height"));
      } else {
        $(e.currentTarget).closest("ul").siblings(".active").removeClass("active");
        previousTierHeight = $(e.currentTarget).closest(".mega-nav-second-tier").outerHeight();
        this.megaNavDropdown.height(previousTierHeight);
      }
      if (!this.$(".active").length) {
        return this.resetMegaNav();
      }
    };

    return NavigationView;

  })(Backbone.View);

}).call(this);

(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  window.SidebarView = (function(superClass) {
    extend(SidebarView, superClass);

    function SidebarView() {
      return SidebarView.__super__.constructor.apply(this, arguments);
    }

    SidebarView.prototype.events = {
      "click .has-children > a": "toggleDropdown"
    };

    SidebarView.prototype.initialize = function() {};

    SidebarView.prototype.toggleDropdown = function(e) {
      if (document.documentElement.clientWidth < 721) {
        e.preventDefault();
        $(e.target).parent().toggleClass("open");
        return false;
      }
    };

    return SidebarView;

  })(Backbone.View);

}).call(this);

(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  window.FooterView = (function(superClass) {
    extend(FooterView, superClass);

    function FooterView() {
      return FooterView.__super__.constructor.apply(this, arguments);
    }

    FooterView.prototype.events = {};

    FooterView.prototype.initialize = function() {
      this.instagramToken = Pacific.settings["footer-instagram-access-token"];
      if (this.$(".footer-instagram").length && this.instagramToken.length) {
        this.count = "{{ settings.footer-instagram-count }}" * 1;
        this.fetchInstagramPhotos();
      }
      if (this.$(".footer-tweet").length) {
        return this.fetchTweets();
      }
    };

    FooterView.prototype.fetchInstagramPhotos = function() {
      var url;
      if (Pacific.settings["footer-instagram-use-tag"]) {
        url = "https://api.instagram.com/v1/tags/{{ settings.footer-instagram-tag }}/media/recent?access_token=" + this.instagramToken + "&count=" + this.count + "&callback=?";
      } else {
        url = "https://api.instagram.com/v1/users/self/media/recent?access_token=" + this.instagramToken + "&count=" + this.count + "&callback=?";
      }
      return $.ajax(url, {
        type: "GET",
        dataType: "jsonp",
        timeout: 10000,
        error: (function(_this) {
          return function(jqXHR, textStatus) {
            _this.$(".footer-instagram").hide();
            console.log("Instagram Error: " + textStatus);
            if (textStatus === "timeout") {
              return console.log("A timeout error means that either the API is down or the merchant provided an incorrect User ID causing a 404.");
            }
          };
        })(this),
        success: (function(_this) {
          return function(query) {
            var i, j, len, photo, ref, results;
            if (_this.count === 3) {
              i = 2;
            } else {
              i = 5;
            }
            if (query.meta.code === 200) {
              ref = query.data.slice(0, +i + 1 || 9e9);
              results = [];
              for (j = 0, len = ref.length; j < len; j++) {
                photo = ref[j];
                results.push(_this.$(".footer-instagram-photos").append("<a class='footer-instagram-photo' href='" + photo.link + "' target='_blank'><img alt='' src='" + photo.images.low_resolution.url + "'></a>"));
              }
              return results;
            } else {
              // _this.$(".footer-instagram").hide();
              // return console.log("Instagram Error: " + query.meta.error_message);
            }
          };
        })(this)
      });
    };

    FooterView.prototype.fetchTweets = function() {
      var config;
      config = {
        "id": "{{ settings.footer-twitter-id }}",
        "maxTweets": 1,
        "enableLinks": true,
        "showUser": true,
        "showTime": true,
        "showRetweet": Pacific.settings["footer-twitter-retweets"],
        "customCallback": this.renderTweets,
        "showInteraction": false
      };
      return twitterFetcher.fetch(config);
    };

    FooterView.prototype.renderTweets = function(tweets) {
      if (tweets.length) {
        return this.$(".footer-tweet").append(tweets[0]);
      } else {
        return console.log("No tweets to display. Most probably cause is an incorrectly entered Widget ID.");
      }
    };

    return FooterView;

  })(Backbone.View);

}).call(this);

(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  window.AccountView = (function(superClass) {
    extend(AccountView, superClass);

    function AccountView() {
      return AccountView.__super__.constructor.apply(this, arguments);
    }

    AccountView.prototype.events = {
      "click .delete-address": "deleteAddress",
      "click .edit-address": "editAddress",
      "click .cancel-edit": "cancelEditing",
      "click .toggle-new-address": "toggleNewAddress",
      "click .toggle-forgetfulness span": "recoverPassword"
    };

    AccountView.prototype.initialize = function() {
      if ($(document.body).hasClass("template-customers-addresses")) {
        this.prepareAddresses();
      }
      if ($(document.body).hasClass("template-customers-login")) {
        this.checkForReset();
      }
      if (window.location.hash === "#recover") {
        return this.recoverPassword();
      }
    };

    AccountView.prototype.recoverPassword = function() {
      this.$(".recover-password").toggle();
      return this.$(".customer-login").toggle();
    };

    AccountView.prototype.checkForReset = function() {
      if ($(".reset-check").data("successful-reset") === true) {
        return $(".successful-reset").show();
      }
    };

    AccountView.prototype.prepareAddresses = function() {
      var address, addressID, addresses, i, len, results;
      new Shopify.CountryProvinceSelector("address-country", "address-province", {
        hideElement: "address-province-container"
      });
      addresses = this.$(".customer-address");
      if (addresses.length) {
        results = [];
        for (i = 0, len = addresses.length; i < len; i++) {
          address = addresses[i];
          addressID = $(address).data("address-id");
          results.push(new Shopify.CountryProvinceSelector("address-country-" + addressID, "address-province-" + addressID, {
            hideElement: "address-province-container-" + addressID
          }));
        }
        return results;
      }
    };

    AccountView.prototype.deleteAddress = function(e) {
      var addressID;
      addressID = $(e.target).parents("[data-address-id]").data("address-id");
      return Shopify.CustomerAddress.destroy(addressID);
    };

    AccountView.prototype.editAddress = function(e) {
      var addressID, modalContent;
      addressID = $(e.target).parents("[data-address-id]").data("address-id");
      modalContent = new ModalContent({
        title: false,
        message: false
      });
      return new ModalView({
        model: modalContent,
        el: this.$(".modal-wrapper[data-address-id='" + addressID + "']")
      });
    };

    AccountView.prototype.cancelEditing = function(e) {
      var addressID;
      addressID = $(e.target).parents("[data-address-id]").data("address-id");
      $(".customer-address[data-address-id='" + addressID + "']").removeClass("editing");
      return $(".customer-address-edit-form[data-address-id='" + addressID + "']").removeClass("show");
    };

    AccountView.prototype.toggleNewAddress = function() {
      this.$(".add-new-address").toggle();
      return this.$(".customer-new-address").toggleClass("show");
    };

    return AccountView;

  })(Backbone.View);

}).call(this);

(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  window.CartView = (function(superClass) {
    extend(CartView, superClass);

    function CartView() {
      return CartView.__super__.constructor.apply(this, arguments);
    }

    CartView.prototype.events = {
      "change .cart-item-quantity-display": "updateQuantity",
      "click .cart-item-decrease": "updateQuantity",
      "click .cart-item-increase": "updateQuantity",
      "click .remove span": "removeProduct",
      "click .cart-undo": "undoRemoval",
      "change .cart-instructions textarea": "saveSpecialInstructions",
      "click .cart-item-upload": "showFile",
      "click .get-rates": "onGetRates"
    };

    CartView.prototype.initialize = function() {
      this.transitionend = (function(transition) {
        var transEndEventNames;
        transEndEventNames = {
          "-webkit-transition": "webkitTransitionEnd",
          "-moz-transition": "transitionend",
          "-o-transition": "oTransitionEnd",
          transition: "transitionend"
        };
        return transEndEventNames[transition];
      })(Modernizr.prefixed("transition"));
      this.savedProducts = [];
      if (Pacific.settings["cart-shipping-calculator"] && Shop.requiresShipping) {
        this.shippingCalculator();
        if (Shop.customerLoggedIn && Shop.customerAddress && Shop.customerAddress.country.length && Shop.customerAddress.zip.length) {
          this.calculateShipping(true);
        }
        return Shopify.onError = (function(_this) {
          return function(XMLHttpRequest) {
            return _this.handleErrors(XMLHttpRequest);
          };
        })(this);
      }
    };

    CartView.prototype.saveSpecialInstructions = function() {
      var newNote;
      newNote = $(".cart-instructions textarea").val();
      return Shopify.updateCartNote(newNote, function(cart) {});
    };

    CartView.prototype.updateQuantity = function(e) {
      var inventory, modalContent, newQuantity, oldQuantity, productPrice, productQuantity, productRow, variant;
      productRow = $(e.target).parents("tr");
      productQuantity = productRow.find(".cart-item-quantity-display");
      oldQuantity = parseInt(productQuantity.val());
      if (Pacific.settings["disable-ajax"] || Pacific.settings["enable-currency-switcher"]) {
        if ($(e.target).hasClass("cart-item-increase")) {
          newQuantity = oldQuantity + 1;
          productQuantity.val(newQuantity);
        } else if ($(e.target).hasClass("cart-item-decrease")) {
          newQuantity = oldQuantity - 1;
          productQuantity.val(newQuantity);
        }
        return;
      }
      productPrice = productRow.find(".cart-item-total .money");
      variant = productRow.data("variant");
      inventory = parseInt(productRow.find(".cart-item-quantity").data("max"), 10);
      if ($(e.target).hasClass(".cart-item-quantity-display")) {
        newQuantity = productQuantity;
      } else if ($(e.target).hasClass("cart-item-increase")) {
        newQuantity = oldQuantity + 1;
      } else {
        newQuantity = oldQuantity - 1;
      }
      if (newQuantity === 0) {
        this.removeProduct(null, variant);
        return;
      }
      if (newQuantity > inventory) {
        modalContent = new ModalContent({
          title: "Not Available",
          message: "<p>Sorry, we only have " + inventory + " in stock.</p>",
          button: "Okay"
        });
        new ModalView({
          model: modalContent,
          el: this.$(".modal-wrapper")
        });
      }
      return Shopify.changeItem(variant, newQuantity, (function(_this) {
        return function(cart) {
          var i, item, len, newProductPrice, ref;
          ref = cart.items;
          for (i = 0, len = ref.length; i < len; i++) {
            item = ref[i];
            if (item.id === variant) {
              newProductPrice = Shopify.formatMoney(item.line_price, Shop.moneyFormat);
              productPrice.html(newProductPrice);
              productRow.find(".cart-item-quantity-display").val(item.quantity);
            }
          }
          return _this.updateCart(cart);
        };
      })(this));
    };

    CartView.prototype.removeProduct = function(e, variant) {
      var itemRow, itemRowContents, productTitle, productURL, showUndo;
      if (variant) {
        itemRow = $(".variant-" + variant);
      } else {
        variant = $(e.target).parents("tr").data("variant");
        itemRow = $(e.target).parents("tr");
      }
      itemRowContents = itemRow.find("td");
      productTitle = itemRow.data("title");
      productURL = itemRow.data("url");
      this.savedProducts[variant] = {
        "id": variant,
        "content": itemRowContents,
        "quantity": itemRow.find("td.quantity input").val()
      };
      showUndo = (function(_this) {
        return function() {
          var itemRemovedText;
          itemRemovedText = "{{ 'cart.item_removed_message' | t | escape }}".replace("{% raw %}{{ item_title }}{% endraw %}", "<a href='" + productURL + "'>" + productTitle + "</a>");
          itemRow.html("<td colspan='5'>" + itemRemovedText + " <span class='cart-undo' data-variant='" + variant + "'>{{ 'cart.undo' | t | escape }}</span>");
          return itemRow.removeClass("removing");
        };
      })(this);
      return Shopify.removeItem(variant, (function(_this) {
        return function(cart) {
          if (Modernizr.csstransitions) {
            itemRow.addClass("removing").one(_this.transitionend, function() {
              return showUndo();
            });
          } else {
            showUndo();
          }
          return _this.updateCart(cart);
        };
      })(this));
    };

    CartView.prototype.undoRemoval = function(e) {
      var savedProduct, variant;
      variant = $(e.target).data("variant");
      savedProduct = this.savedProducts[variant];
      $("tr.variant-" + variant).html(savedProduct.content);
      return Shopify.addItem(variant, savedProduct.quantity, (function(_this) {
        return function() {
          return Shopify.getCart(function(cart) {
            return _this.updateCart(cart);
          });
        };
      })(this));
    };

    CartView.prototype.updateCart = function(cart) {
      var cartCount, cartCountText, newTotal;
      newTotal = Shopify.formatMoney(cart.total_price, Shop.moneyFormat);
      this.$(".cart-checkout .cart-price .money").html(newTotal);
      cartCount = cart.item_count;
      cartCountText = cart.item_count === 1 ? "item" : "items";
      $(".bag-count").text(cartCount);
      return $(".bag-text").text(cartCountText);
    };

    CartView.prototype.showFile = function(e) {
      var file, image, modalContent;
      file = $(e.target).data("file");
      if (file.match(/(jpg|jpeg|png|gif)/)) {
        image = "<img alt='' src='" + file + "'>";
        modalContent = new ModalContent({
          title: $(e.target).prev().text(),
          message: image
        });
        return new ModalView({
          model: modalContent,
          el: this.$(".modal-wrapper")
        });
      }
    };

    CartView.prototype.shippingCalculator = function() {
      var selectableOptions;
      Shopify.Cart.ShippingCalculator.show({
        submitButton: "{{ 'cart.shipping_calculator.submit' | t | escape }}",
        submitButtonDisabled: "{{ 'cart.shipping_calculator.disabled' | t | escape }}",
        customerIsLoggedIn: Shop.customerLoggedIn,
        moneyFormat: Shop.moneyFormat
      });
      selectableOptions = this.$(".cart-shipping-calculator select");
      setTimeout((function(_this) {
        return function() {
          var i, len, results, select;
          results = [];
          for (i = 0, len = selectableOptions.length; i < len; i++) {
            select = selectableOptions[i];
            results.push(_this.updateShippingLabel(select));
          }
          return results;
        };
      })(this), 500);
      return this.$(".cart-shipping-calculator select").change((function(_this) {
        return function(e) {
          var i, len, results, select;
          results = [];
          for (i = 0, len = selectableOptions.length; i < len; i++) {
            select = selectableOptions[i];
            results.push(_this.updateShippingLabel(select));
          }
          return results;
        };
      })(this));
    };

    CartView.prototype.onGetRates = function() {
      return this.calculateShipping();
    };

    CartView.prototype.calculateShipping = function(auto) {
      var shippingAddress;
      this.$(".get-rates").val("{{ 'cart.shipping_calculator.disabled' | t | escape }}");
      if (auto) {
        shippingAddress = Shop.customerAddress;
      } else {
        shippingAddress = {};
        shippingAddress.zip = this.$(".address-zip").val() || "";
        shippingAddress.country = this.$(".address-country").val() || "";
        shippingAddress.province = this.$(".address-province").val() || "";
      }
      return Shopify.getCartShippingRatesForDestination(shippingAddress, function(rates) {
        var address, feedback, firstRate, i, len, price, rate, rateValues, ratesFeedback, response, shippingCalculatorResponse;
        address = shippingAddress.zip + ", " + shippingAddress.province + ", " + shippingAddress.country;
        if (!shippingAddress.province.length) {
          address = shippingAddress.zip + ", " + shippingAddress.country;
        }
        if (!shippingAddress.zip.length) {
          address = shippingAddress.province + ", " + shippingAddress.country;
        }
        if (!(shippingAddress.province.length && shippingAddress.zip.length)) {
          address = shippingAddress.country;
        }
        shippingCalculatorResponse = this.$(".cart-shipping-calculator-response");
        shippingCalculatorResponse.empty().append("<p class='shipping-calculator-response message'/><ul class='shipping-rates'/>");
        ratesFeedback = $(".shipping-calculator-response");
        if (rates.length > 1) {
          firstRate = Shopify.Cart.ShippingCalculator.formatRate(rates[0].price);
          feedback = "{{ 'cart.shipping_calculator.rates_html' | t | escape }}".replace("{% raw %}{{ address }}{% endraw %}", address).replace("{% raw %}{{ number_of_rates }}{% endraw %}", rates.length).replace("{% raw %}{{ rate }}{% endraw %}", "<span class='money'>" + firstRate + "</span>");
          ratesFeedback.html(feedback);
        } else if (rates.length === 1) {
          response = "{{ 'cart.shipping_calculator.rate' | t | escape }}".replace("{% raw %}{{ address }}{% endraw %}", address);
          ratesFeedback.html(response);
        } else {
          ratesFeedback.html("{{ 'cart.shipping_calculator.no_rates' | t | escape }}");
        }
        for (i = 0, len = rates.length; i < len; i++) {
          rate = rates[i];
          price = Shopify.Cart.ShippingCalculator.formatRate(rate.price);
          rateValues = "{{ 'cart.shipping_calculator.rate_values_html' | t | escape }}".replace("{% raw %}{{ rate_title }}{% endraw %}", rate.name).replace("{% raw %}{{ rate }}{% endraw %}", "<span class='money'>" + price + "</span>");
          this.$(".shipping-rates").append("<li>" + rateValues + "</li>");
        }
        return this.$(".get-rates").val("{{ 'cart.shipping_calculator.submit' | t | escape }}");
      });
    };

    CartView.prototype.handleErrors = function(errors) {
      var errorMessage;
      errorMessage = $.parseJSON(errors.responseText);
      errorMessage = "{{ 'cart.shipping_calculator.error' | t | escape }}".replace("{% raw %}{{ error_message }}{% endraw %}", errorMessage.zip);
      this.$(".cart-shipping-calculator-response").html("<p class='error'>" + errorMessage + "</p>");
      return this.$(".get-rates").val("{{ 'cart.shipping_calculator.submit' | t | escape }}");
    };

    CartView.prototype.updateShippingLabel = function(select) {
      var selectedOption;
      if (select) {
        select = $(select);
        selectedOption = select.find("option:selected").val();
        if (!selectedOption) {
          selectedOption = select.prev(".selected-text").data("default");
        }
        select.prev(".selected-text").text(selectedOption);
        return setTimeout((function(_this) {
          return function() {
            if (select.attr("name") === "address[country]") {
              return _this.updateShippingLabel(_this.$("#address_province"));
            }
          };
        })(this), 500);
      }
    };

    return CartView;

  })(Backbone.View);

}).call(this);

(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  window.ModalContent = (function(superClass) {
    extend(ModalContent, superClass);

    function ModalContent() {
      return ModalContent.__super__.constructor.apply(this, arguments);
    }

    ModalContent.prototype.defaults = {
      title: "",
      message: "",
      button: false
    };

    return ModalContent;

  })(Backbone.Model);

  window.ModalView = (function(superClass) {
    extend(ModalView, superClass);

    function ModalView() {
      return ModalView.__super__.constructor.apply(this, arguments);
    }

    ModalView.prototype.events = {
      "click .modal-close": "closeModal"
    };

    ModalView.prototype.initialize = function() {
      this.content = this.model.toJSON();
      this.body = $(document.body);
      this.transitionend = (function(transition) {
        var transEndEventNames;
        transEndEventNames = {
          "-webkit-transition": "webkitTransitionEnd",
          "-moz-transition": "transitionend",
          "-o-transition": "oTransitionEnd",
          transition: "transitionend"
        };
        return transEndEventNames[transition];
      })(Modernizr.prefixed("transition"));
      this.enterContent();
      return this.openModal();
    };

    ModalView.prototype.enterContent = function() {
      if (this.content.title) {
        this.$(".modal-title").text(this.content.title);
      }
      if (this.content.message) {
        this.$(".modal-message").html(this.content.message);
      }
      if (this.content.button) {
        return this.$(".modal-message").append("<p><span class='modal-close button'>" + this.content.button + "</span></p>");
      }
    };

    ModalView.prototype.centerModal = function() {
      var modalContentHeight, modalContentWidth;
      modalContentHeight = this.$(".modal-content").outerHeight();
      modalContentWidth = this.$(".modal-content").outerWidth();
      if (modalContentHeight > $(window).height()) {
        this.$(".modal-content").css({
          marginTop: 0,
          marginLeft: -(modalContentWidth / 2)
        });
        return this.body.addClass("modal-overflow");
      } else {
        this.$(".modal-content").css({
          marginTop: -(modalContentHeight / 2),
          marginLeft: -(modalContentWidth / 2)
        });
        return this.body.removeClass("modal-overflow");
      }
    };

    ModalView.prototype.openModal = function() {
      var checkImagesLoaded;
      this.$el.addClass("active");
      setTimeout((function(_this) {
        return function() {
          return _this.$el.addClass("opening");
        };
      })(this), 20);
      checkImagesLoaded = (function(_this) {
        return function() {
          return _this.$el.imagesLoaded(function() {
            _this.centerModal();
            $(window).on("resize", _.debounce(_this.centerModal, 50));
            return _this.$el.addClass("open");
          });
        };
      })(this);
      if (Modernizr.csstransitions) {
        this.$el.one(this.transitionend, (function(_this) {
          return function() {
            return checkImagesLoaded();
          };
        })(this));
      } else {
        checkImagesLoaded();
      }
      return this.body.on("keyup.modal", (function(_this) {
        return function(e) {
          if (e && e.type === "keyup" && e.keyCode === 27) {
            return _this.closeModal();
          }
        };
      })(this));
    };

    ModalView.prototype.closeModal = function() {
      var finishClosing;
      this.body.off("keyup.modal");
      this.$el.removeClass("open");
      this.$(".modal-content").one(this.transitionend, (function(_this) {
        return function(e) {
          return _this.$el.removeClass("opening");
        };
      })(this));
      finishClosing = (function(_this) {
        return function() {
          _this.$(".modal-content").unbind();
          _this.$el.unbind();
          _this.unbind();
          _this.body.removeClass("modal-overflow");
          return _this.$el.removeClass("active");
        };
      })(this);
      if (Modernizr.csstransitions) {
        this.$(".modal-content").one(this.transitionend, (function(_this) {
          return function(e) {
            return _this.$el.removeClass("opening");
          };
        })(this));
        return this.$el.on(this.transitionend, (function(_this) {
          return function(e) {
            if ($(e.target).hasClass("modal-wrapper")) {
              return finishClosing();
            }
          };
        })(this));
      } else {
        this.$el.removeClass("opening");
        return finishClosing();
      }
    };

    return ModalView;

  })(Backbone.View);

}).call(this);

(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  window.CollectionView = (function(superClass) {
    extend(CollectionView, superClass);

    function CollectionView() {
      return CollectionView.__super__.constructor.apply(this, arguments);
    }

    CollectionView.prototype.events = {
      "change .collection-filter select": "updateFilter",
      "change .collection-sorting select": "sortProducts",
      "click .collection-sorting .list-radios li": "sortProductsFlexible",
      "click .collection-remove-filter": "resetFilter",
      "click .collection-description-more": "createModal",
      "click .collection-sharing-toggle": "toggleSharing",
      "mouseout .share-buttons": "toggleSharing"
    };

    CollectionView.prototype.initialize = function() {
      this.tagsWrapper = this.$(".collection-tags-wrapper");
      this.tags = this.tagsWrapper.find(".collection-tags");
      this.tagFilter = this.$(".collection-tags-apply");
      if ($("html").hasClass("lt-ie9") && this.$(".collection-header").length) {
        this.verticallyAlignHeaderText();
      }
      if (Pacific.settings["collection-filtering"]) {
        this.filterProducts();
      }
      if (Pacific.settings["collection-product-text-style"] === "overlay") {
        this.verticallyAlignProductDetails();
      }
      if (Pacific.settings["collection-layout-style"] === "masonry") {
        return this.masonryLayout();
      }
    };

    CollectionView.prototype.verticallyAlignHeaderText = function() {
      var headerHeight;
      headerHeight = this.$(".collection-details").height();
      return this.$(".collection-details").css({
        marginTop: -(headerHeight / 2)
      });
    };

    CollectionView.prototype.verticallyAlignProductDetails = function() {
      var detailsHeight, i, len, product, ref, results;
      ref = this.$(".product-list-item");
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        product = ref[i];
        detailsHeight = $(product).find(".product-list-item-details").height();
        results.push($(product).find(".product-list-item-details").css({
          marginTop: -(detailsHeight / 2)
        }));
      }
      return results;
    };

    CollectionView.prototype.toggleSharing = function(e) {
      if (e.type === "mouseout") {
        if ($(e.relatedTarget).closest(".share-buttons").length) {
          return;
        }
      }
      return this.$(".collection-sharing").toggleClass("active");
    };

    CollectionView.prototype.sortProducts = function(e) {
      var Sorting, currentSearch, i, index, len, part, search, searchParts;
      Sorting = {};
      Sorting.sort_by = this.$(".collection-sorting select").val();
      if ($(e.target).closest(".collection-sorting").hasClass("vendor-collection")) {
        currentSearch = location.search;
        searchParts = currentSearch.split("&");
        for (index = i = 0, len = searchParts.length; i < len; index = ++i) {
          part = searchParts[index];
          if (part.indexOf("sort_by") !== -1) {
            searchParts.splice(index, 1);
          }
        }
        search = searchParts.join("&");
        return location.search = search + "&" + (jQuery.param(Sorting));
      } else {
        return location.search = jQuery.param(Sorting);
      }
    };

    CollectionView.prototype.sortProductsFlexible = function(e) {
      var Sorting, currentSearch, i, index, len, part, search, searchParts;
      Sorting = {};
      Sorting.sort_by = $(e.target).data('value');
      console.log($(e.target).data('value'));
      if ($(e.target).closest(".collection-sorting").hasClass("vendor-collection")) {
        currentSearch = location.search;
        searchParts = currentSearch.split("&");
        for (index = i = 0, len = searchParts.length; i < len; index = ++i) {
          part = searchParts[index];
          if (part.indexOf("sort_by") !== -1) {
            searchParts.splice(index, 1);
          }
        }
        search = searchParts.join("&");
        return location.search = search + "&" + (jQuery.param(Sorting));
      } else {
        return location.search = jQuery.param(Sorting);
      }
    };

    CollectionView.prototype.masonryLayout = function() {
      var products;
      products = this.$(".collection-products");
      if (this.$(".product-list-item").length) {
        return products.imagesLoaded((function(_this) {
          return function() {
            var masonry;
            products.masonry({
              transitionDuration: 0
            });
            masonry = products.data("masonry");
            masonry.on("layoutComplete", products.addClass("processed"));
            return masonry.off("layoutComplete");
          };
        })(this));
      } else {
        return products.addClass("processed empty-collection");
      }
    };

    CollectionView.prototype.filterProducts = function() {
      var filter, i, len, ref, results, selectedText;
      this.fallbackURL = this.$(".collection-filtering").data("fallback-url");
      ref = this.$(".collection-filter select");
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        filter = ref[i];
        if ($(filter).val() !== "any") {
          selectedText = $(filter).find("option:selected").text();
          results.push($(filter).prev().find("strong").text(selectedText));
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    CollectionView.prototype.updateFilter = function(e) {
      var filter, filterURL, i, len, newTags, ref, tag, tags;
      newTags = [];
      $(e.target).toggleClass("active");
      ref = this.$(".collection-filter select");
      for (i = 0, len = ref.length; i < len; i++) {
        filter = ref[i];
        if ($(filter).val() !== "any") {
          tag = $(filter).val();
          newTags.push(tag);
        }
      }
      if (newTags.length) {
        tags = newTags.join("+");
        filterURL = this.fallbackURL + "/" + tags + location.search;
        return window.location.href = filterURL;
      } else {
        return this.resetFilter();
      }
    };

    CollectionView.prototype.resetFilter = function() {
      var fallback;
      fallback = "" + this.fallbackURL + location.search;
      return window.location.href = fallback;
    };

    CollectionView.prototype.createModal = function() {
      var modalContent;
      modalContent = new ModalContent({
        "title": collectionJSON.title,
        "message": collectionJSON.body_html
      });
      return new ModalView({
        model: modalContent,
        el: this.$(".modal-wrapper")
      });
    };

    return CollectionView;

  })(Backbone.View);

}).call(this);

(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  window.SlideshowView = (function(superClass) {
    extend(SlideshowView, superClass);

    function SlideshowView() {
      return SlideshowView.__super__.constructor.apply(this, arguments);
    }

    SlideshowView.prototype.events = {
      "click .previous-slide": "previousSlide",
      "click .next-slide": "nextSlide",
      "click .slideshow-pagination > span": "specificSlide",
      "mouseenter": "pauseLoop",
      "mouseleave": "startLoop"
    };

    SlideshowView.prototype.initialize = function() {
      this.navigation = this.$(".slideshow-navigation");
      this.pagination = this.$(".slideshow-pagination");
      this.setWindowWidth();
      this.setupSlides();
      return this.transitionend = (function(transition) {
        var transEndEventNames;
        transEndEventNames = {
          "-webkit-transition": "webkitTransitionEnd",
          "-moz-transition": "transitionend",
          "-o-transition": "oTransitionEnd",
          transition: "transitionend"
        };
        return transEndEventNames[transition];
      })(Modernizr.prefixed("transition"));
    };

    SlideshowView.prototype.setWindowWidth = function() {
      return this.windowWidth = document.documentElement.clientWidth;
    };

    SlideshowView.prototype.setupSlides = function() {
      var paginationWidth;
      this.slides = this.$(".slideshow-slide");
      this.slideCount = this.slides.length;
      this.pagination.find("span:first").addClass("active");
      if (!Modernizr.csstransforms) {
        paginationWidth = this.pagination.width();
        this.pagination.css({
          marginLeft: -(paginationWidth / 2)
        });
      }
      return this.$el.imagesLoaded((function(_this) {
        return function() {
          var i, image, imageHeight, j, len, ref, slide, slideContent, slideHeight, slideID, textHeight;
          ref = _this.slides;
          for (i = j = 0, len = ref.length; j < len; i = ++j) {
            slide = ref[i];
            slide = $(slide);
            slideID = slide.attr("id");
            image = slide.find(".slide-image");
            imageHeight = image.height();
            slide.data("height", imageHeight);
            slideHeight = _this.windowWidth <= 540 ? slide.height() : imageHeight;
            if (!Modernizr.csstransforms) {
              slideContent = slide.find(".slide-content");
              textHeight = slideContent.height();
              slideContent.css({
                marginTop: -(textHeight / 2)
              });
            }
            if (i === 0) {
              slide.addClass("active");
              _this.$el.height(slideHeight);
              _this.navigation.css({
                paddingTop: ((imageHeight - 48) / 2) + "px"
              });
              _this.resetPaginationPosition(imageHeight);
            }
            if (i + 1 === _this.slideCount) {
              _this.$el.addClass("slides-ready");
            }
          }
          $(window).on("resize", function() {
            _this.setWindowWidth();
            return _this.resetSlideHeights();
          });
          if (Pacific.settings["slideshow-autoplay"]) {
            _this.delay = 4000;
            if (Pacific.settings["slideshow-autoplay-delay"].length) {
              _this.delay = parseInt(Pacific.settings["slideshow-autoplay-delay"], 10) * 1000;
            }
            return _this.startLoop();
          }
        };
      })(this));
    };

    SlideshowView.prototype.resetSlideHeights = function() {
      var image, imageHeight, j, len, ref, results, slide, slideHeight;
      ref = this.slides;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        slide = ref[j];
        slide = $(slide);
        image = slide.find(".slide-image");
        imageHeight = image.height();
        slide.css("height", "");
        slide.data("height", imageHeight);
        slideHeight = this.windowWidth <= 540 ? slide.height() : imageHeight;
        if (slide.hasClass("active")) {
          this.$el.height(slideHeight);
          this.navigation.css({
            paddingTop: ((imageHeight - 48) / 2) + "px"
          });
          results.push(this.resetPaginationPosition(imageHeight));
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    SlideshowView.prototype.resetPaginationPosition = function(height) {
      if (this.windowWidth <= 540) {
        return this.pagination.css({
          bottom: "auto",
          top: height - 30
        });
      } else {
        return this.pagination.css({
          bottom: 0,
          top: "auto"
        });
      }
    };

    SlideshowView.prototype.previousSlide = function(e) {
      if (this.sliding) {
        return;
      }
      this.showNewSlide("prev");
      return e.preventDefault();
    };

    SlideshowView.prototype.nextSlide = function(e) {
      if (this.sliding) {
        return;
      }
      this.showNewSlide("next");
      if (e) {
        return e.preventDefault();
      }
    };

    SlideshowView.prototype.specificSlide = function(e) {
      var nextSlideID;
      if (!$(e.currentTarget).hasClass("active")) {
        nextSlideID = $(e.currentTarget).data("slide-id");
        return this.showNewSlide("next", nextSlideID);
      }
    };

    SlideshowView.prototype.updateSlidePagination = function(index) {
      this.pagination.find(".active").removeClass("active");
      return this.pagination.find("> span").eq(index).addClass("active");
    };

    SlideshowView.prototype.showNewSlide = function(type, specificSlide) {
      var activeSlide, called, direction, fallback, imageHeight, nextSlide, slideHeight, slideID;
      this.sliding = true;
      called = false;
      if (this.slides.length === 1) {
        this.sliding = false;
        return;
      }
      direction = type === "next" ? "left" : "right";
      fallback = type === "next" ? "first" : "last";
      activeSlide = this.$(".slideshow-slide.active");
      nextSlide = specificSlide ? this.$("#" + specificSlide) : activeSlide[type]();
      nextSlide = nextSlide.length ? nextSlide : this.slides[fallback]();
      nextSlide.addClass(type);
      nextSlide[0].offsetWidth;
      activeSlide.addClass(direction);
      nextSlide.addClass(direction);
      if (Modernizr.csstransitions) {
        nextSlide.one(this.transitionend, (function(_this) {
          return function() {
            called = true;
            nextSlide.removeClass([type, direction].join(" ")).addClass("active");
            activeSlide.removeClass(["active", direction].join(" "));
            return _this.sliding = false;
          };
        })(this));
        setTimeout((function(_this) {
          return function() {
            if (!called) {
              return nextSlide.trigger(_this.transitionend);
            }
          };
        })(this), 300 + 10);
      } else {
        nextSlide.removeClass([type, direction].join(" ")).addClass("active");
        activeSlide.removeClass(["active", direction].join(" "));
        this.sliding = false;
      }
      imageHeight = nextSlide.data("height");
      this.updateSlidePagination(nextSlide.index());
      this.resetPaginationPosition(imageHeight);
      this.navigation.css({
        paddingTop: ((imageHeight - 48) / 2) + "px"
      });
      slideHeight = this.windowWidth <= 720 ? nextSlide.height() : imageHeight;
      slideID = nextSlide.attr('id');
      return this.$el.height(slideHeight).removeClass("showing-slide-" + (activeSlide.index() + 1)).addClass("showing-slide-" + (nextSlide.index() + 1));
    };

    SlideshowView.prototype.startLoop = function() {
      if (Pacific.settings["slideshow-autoplay"]) {
        if (!this.loop) {
          this.loop = true;
          return this.autoplay = setInterval((function(_this) {
            return function() {
              return _this.nextSlide();
            };
          })(this), this.delay);
        }
      }
    };

    SlideshowView.prototype.pauseLoop = function() {
      this.loop = false;
      return clearInterval(this.autoplay);
    };

    return SlideshowView;

  })(Backbone.View);

}).call(this);

(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  window.HomeView = (function(superClass) {
    extend(HomeView, superClass);

    function HomeView() {
      return HomeView.__super__.constructor.apply(this, arguments);
    }

    HomeView.prototype.events = {
      "click .home-video-play-button": "openVideo",
      "keyup": "closeVideo"
    };

    HomeView.prototype.initialize = function() {
      var collection, feature, i, j, k, len, len1, len2, product, ref, ref1, ref2;
      if (Pacific.settings["home-modules-order"].indexOf("A") > -1) {
        new SlideshowView({
          el: this.$(".home-slideshow")
        });
      }
      if (this.$(".home-video").length) {
        this.videoWrapper = this.$(".home-video-embed-wrapper");
        this.video = this.$(".home-video-embed");
        this.detachedVideo = null;
      }
      if (this.$(".home-featured-products").length && Pacific.settings["collection-product-text-style"] === "overlay") {
        ref = this.$(".product-list-item");
        for (i = 0, len = ref.length; i < len; i++) {
          product = ref[i];
          this.verticallyAlignContent($(product).find(".product-list-item-details"));
        }
      }
      if ($("html").hasClass("lt-ie9")) {
        this.centerVideoText();
        ref1 = this.$(".home-featured-collection");
        for (j = 0, len1 = ref1.length; j < len1; j++) {
          collection = ref1[j];
          this.verticallyAlignContent($(collection).find(".home-featured-collection-content"));
        }
        ref2 = this.$(".home-feature");
        for (k = 0, len2 = ref2.length; k < len2; k++) {
          feature = ref2[k];
          if ($(feature).find(".home-feature-content").length) {
            this.verticallyAlignContent($(feature).find(".home-feature-content"));
          }
        }
      }
      return this.transitionend = (function(transition) {
        var transEndEventNames;
        transEndEventNames = {
          "-webkit-transition": "webkitTransitionEnd",
          "-moz-transition": "transitionend",
          "-o-transition": "oTransitionEnd",
          transition: "transitionend"
        };
        return transEndEventNames[transition];
      })(Modernizr.prefixed("transition"));
    };

    HomeView.prototype.openVideo = function() {
      this.videoWrapper.addClass("opening");
      if (this.detachedVideo) {
        this.video.width("");
        this.detachedVideo.appendTo(this.video);
      } else {
        this.video.fitVids({
          customSelector: "iframe"
        });
      }
      this.verticallyCenterVideo();
      $(window).on("resize.video", (function(_this) {
        return function() {
          return _this.verticallyCenterVideo();
        };
      })(this));
      this.videoWrapper.on("click.video", (function(_this) {
        return function() {
          return _this.closeVideo();
        };
      })(this));
      return setTimeout((function(_this) {
        return function() {
          return _this.videoWrapper.addClass("open");
        };
      })(this), 20);
    };

    HomeView.prototype.centerVideoText = function() {
      var contentHeight, contentWidth, videoContent;
      videoContent = this.$(".home-video-content");
      contentWidth = videoContent.outerWidth();
      contentHeight = videoContent.outerHeight();
      return videoContent.css({
        marginTop: -(contentHeight / 2),
        marginLeft: -(contentWidth / 2)
      });
    };

    HomeView.prototype.verticallyCenterVideo = function() {
      var availableHeight, video, videoHeight, videoRatio, windowHeight;
      this.video.css({
        marginTop: 0,
        width: "100%"
      });
      video = this.video.find(".fluid-width-video-wrapper");
      videoHeight = video.outerHeight();
      videoRatio = video.width() / videoHeight;
      windowHeight = window.innerHeight || $(window).height();
      availableHeight = windowHeight - 60;
      if (videoHeight > availableHeight) {
        return this.video.removeClass("centered").css({
          marginTop: 0,
          width: availableHeight * videoRatio
        });
      } else {
        return this.video.addClass("centered").css({
          marginTop: -(videoHeight / 2),
          width: "100%"
        });
      }
    };

    HomeView.prototype.closeVideo = function(e) {
      var detach;
      if (!this.$(".home-video").length) {
        return;
      }
      if (e && this.videoWrapper.hasClass("open")) {
        if (e.which !== 27) {
          return;
        }
      }
      $(window).off("resize.video");
      this.videoWrapper.off("click.video");
      this.videoWrapper.removeClass("open");
      detach = (function(_this) {
        return function() {
          _this.detachedVideo = _this.video.find(".fluid-width-video-wrapper").detach();
          return _this.videoWrapper.removeClass("opening").off(_this.transitionend);
        };
      })(this);
      if (Modernizr.csstransitions) {
        this.videoWrapper.on(this.transitionend, (function(_this) {
          return function() {
            return detach();
          };
        })(this));
        return setTimeout((function(_this) {
          return function() {
            if (_this.videoWrapper.hasClass("opening")) {
              return detach();
            }
          };
        })(this), 300);
      } else {
        return detach();
      }
    };

    HomeView.prototype.verticallyAlignContent = function(content) {
      var contentHeight;
      content = $(content);
      contentHeight = content.outerHeight();
      return content.css({
        marginTop: -(contentHeight / 2)
      });
    };

    return HomeView;

  })(Backbone.View);

}).call(this);

(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  window.ListCollectionsView = (function(superClass) {
    extend(ListCollectionsView, superClass);

    function ListCollectionsView() {
      return ListCollectionsView.__super__.constructor.apply(this, arguments);
    }

    ListCollectionsView.prototype.events = {};

    ListCollectionsView.prototype.initialize = function() {
      if ($("html").hasClass("lt-ie9")) {
        return this.verticallyAlignDetails();
      }
    };

    ListCollectionsView.prototype.verticallyAlignDetails = function() {
      return this.$(".collections-list").imagesLoaded((function(_this) {
        return function() {
          var collection, collectionDetailsHeight, collectionsDetails, i, len, ref, results;
          ref = _this.$(".collection-item");
          results = [];
          for (i = 0, len = ref.length; i < len; i++) {
            collection = ref[i];
            collectionsDetails = $(collection).find(".collection-item-details");
            collectionDetailsHeight = collectionsDetails.height();
            results.push(collectionsDetails.css({
              marginTop: -(collectionDetailsHeight / 2)
            }));
          }
          return results;
        };
      })(this));
    };

    return ListCollectionsView;

  })(Backbone.View);

}).call(this);

(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  window.PasswordView = (function(superClass) {
    extend(PasswordView, superClass);

    function PasswordView() {
      return PasswordView.__super__.constructor.apply(this, arguments);
    }

    PasswordView.prototype.events = {
      "click .password-entry": "togglePasswordForm"
    };

    PasswordView.prototype.initialize = function() {
      this.toggle = this.$(".password-entry");
      if (this.$("[data-password-form-inner]").hasClass("has-errors")) {
        return this.togglePasswordForm();
      }
    };

    PasswordView.prototype.togglePasswordForm = function() {
      this.$(".password-subscribe-wrapper").add(".password-form-wrapper").toggleClass("visible");
      if (this.$(".password-subscribe-wrapper").hasClass("visible")) {
        return this.toggle.text(this.toggle.data("enter-password"));
      } else {
        return this.toggle.text(this.toggle.data("cancel"));
      }
    };

    return PasswordView;

  })(Backbone.View);

}).call(this);

(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  window.ImageZoomView = (function(superClass) {
    extend(ImageZoomView, superClass);

    function ImageZoomView() {
      return ImageZoomView.__super__.constructor.apply(this, arguments);
    }

    ImageZoomView.prototype.events = {
      "prepare-zoom": "prepareZoom",
      "click": "toggleZoom",
      "mouseout .product-zoom": "toggleZoom",
      "mousemove .product-zoom": "zoomImage"
    };

    ImageZoomView.prototype.initialize = function() {
      this.zoomArea = this.$(".product-zoom");
      this.$el.imagesLoaded((function(_this) {
        return function() {
          return _this.prepareZoom();
        };
      })(this));
      return $(window).resize((function(_this) {
        return function() {
          return _this.prepareZoom();
        };
      })(this));
    };

    ImageZoomView.prototype.prepareZoom = function() {
      var newImage, photoAreaHeight, photoAreaWidth;
      photoAreaWidth = this.$el.width();
      photoAreaHeight = this.$el.height();
      newImage = new Image();
      $(newImage).on("load", (function(_this) {
        return function() {
          var ratio, ratios;
          _this.zoomImageWidth = newImage.width;
          _this.zoomImageHeight = newImage.height;
          ratios = new Array();
          ratios[0] = _this.zoomImageWidth / photoAreaWidth;
          ratios[1] = _this.zoomImageHeight / photoAreaHeight;
          ratio = Math.max.apply(Math, ratios);
          if (ratio < 1.4) {
            _this.$el.removeClass("zoom-enabled");
          } else {
            _this.$el.addClass("zoom-enabled");
            return _this.zoomArea.css({
              backgroundImage: "url(" + newImage.src + ")"
            });
          }
        };
      })(this));
      return newImage.src = this.$("img").attr("src");
    };

    ImageZoomView.prototype.toggleZoom = function(e) {
      if (this.$el.hasClass("zoom-enabled")) {
        if (e.type === "mouseout") {
          this.zoomArea.removeClass("active");
          return;
        }
        if (this.zoomArea.hasClass("active")) {
          this.zoomArea.removeClass("active");
        } else {
          this.zoomArea.addClass("active");
        }
        return this.zoomImage(e);
      }
    };

    ImageZoomView.prototype.zoomImage = function(e) {
      var bigImageOffset, bigImageX, bigImageY, mousePositionX, mousePositionY, newBackgroundPosition, ratioX, ratioY, zoomHeight, zoomWidth;
      zoomWidth = this.zoomArea.width();
      zoomHeight = this.zoomArea.height();
      bigImageOffset = this.$el.offset();
      bigImageX = Math.round(bigImageOffset.left);
      bigImageY = Math.round(bigImageOffset.top);
      mousePositionX = e.pageX - bigImageX;
      mousePositionY = e.pageY - bigImageY;
      if (mousePositionX < zoomWidth && mousePositionY < zoomHeight && mousePositionX > 0 && mousePositionY > 0) {
        if (this.zoomArea.hasClass("active")) {
          ratioX = Math.round(mousePositionX / zoomWidth * this.zoomImageWidth - zoomWidth / 2) * -1;
          ratioY = Math.round(mousePositionY / zoomHeight * this.zoomImageHeight - zoomHeight / 2) * -1;
          if (ratioX > 0) {
            ratioX = 0;
          }
          if (ratioY > 0) {
            ratioY = 0;
          }
          if (ratioX < -(this.zoomImageWidth - zoomWidth)) {
            ratioX = -(this.zoomImageWidth - zoomWidth);
          }
          if (ratioY < -(this.zoomImageHeight - zoomHeight)) {
            ratioY = -(this.zoomImageHeight - zoomHeight);
          }
          newBackgroundPosition = ratioX + "px " + ratioY + "px";
          return this.zoomArea.css({
            backgroundPosition: newBackgroundPosition
          });
        }
      }
    };

    return ImageZoomView;

  })(Backbone.View);

}).call(this);

(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  window.ProductView = (function(superClass) {
    extend(ProductView, superClass);

    function ProductView() {
      this.selectCallback = bind(this.selectCallback, this);
      return ProductView.__super__.constructor.apply(this, arguments);
    }

    ProductView.prototype.events = {
      "change .product-options select": "updateVariantLabel",
      "click .product-thumbnails img": "swapImage",
      "submit .product-form": "addToCart"
    };

    ProductView.prototype.initialize = function() {
      this.product = window.productJSON;
      this.variants = this.product.variants;
      this.images = this.product.images;
      this.minimumPriceArea = this.$(".product-price-minimum");
      this.addingToCart = false;
      if (this.$(".product-images").length) {
        this.cacheImages();
      }
      if (this.$(".product-form").length) {
        this.setupSelectors();
      }
      if (Pacific.settings["product-enable-zoom"] && this.$(".product-images").length) {
        new ImageZoomView({
          el: this.$(".product-main-image")
        });
      }
      if (Pacific.settings["collection-product-text-style"] === "overlay" && this.$(".related-products").length) {
        this.verticallyAlignProductDetails();
      }
      return Shopify.onError = (function(_this) {
        return function(XMLHttpRequest) {
          return _this.handleErrors(XMLHttpRequest);
        };
      })(this);
    };

    ProductView.prototype.verticallyAlignProductDetails = function() {
      var detailsHeight, j, len, product, ref, results;
      ref = this.$(".related-products");
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        product = ref[j];
        detailsHeight = $(product).find(".product-list-item-details-wrapper > div").height();
        results.push($(".product-list-item-details-wrapper > div").css({
          marginTop: -(detailsHeight / 2)
        }));
      }
      return results;
    };

    ProductView.prototype.switchCurrency = function(minimum, compare) {
      var attribute, j, len, ref;
      ref = this.minimumPriceArea[0].attributes;
      for (j = 0, len = ref.length; j < len; j++) {
        attribute = ref[j];
        if (attribute.name.indexOf("data-") > -1) {
          this.minimumPriceArea.attr(attribute.name, "");
        }
      }
      this.minimumPriceArea.attr("data-currency-" + Currency.currentCurrency, "").attr("data-currency-" + Shop.currency, Shopify.formatMoney(minimum, Shop.moneyFormat)).attr("data-currency", Shop.currency);
      this.$(".product-price-compare").attr("data-currency-" + Shop.currency, Shopify.formatMoney(compare, Shop.moneyFormat)).attr("data-currency", Shop.currency);
      return $(".currency-switcher").trigger("reset-currency");
    };

    ProductView.prototype.cacheImages = function() {
      return Shopify.Image.preload(this.images, "1024x1024");
    };

    ProductView.prototype.swapImage = function(e, newImage) {
      var mainImage;
      newImage = e ? $(e.target).data("high-res") : newImage;
      mainImage = this.$(".product-main-image img")[0];
      mainImage.src = newImage;
      if (Pacific.settings["product-enable-zoom"]) {
        return this.$(".product-main-image").trigger("prepare-zoom");
      }
    };

    ProductView.prototype.setupSelectors = function() {
      var i, j, len, optionSelectors, ref, results, selector, value;
      optionSelectors = new Shopify.OptionSelectors("product-variants", {
        product: window.productJSON,
        onVariantSelected: this.selectCallback,
        enableHistoryState: false // changed from true to false by Bold 6/16/2016 to hide variant id in url
      });
      optionSelectors.selectVariant(window.FirstVariant);
      if (Pacific.settings["product-enable-linked-options"]) {
        Shopify.linkOptionSelectors(this.product, this.product.id);
      }
      if (this.variants.length === 1 && this.variants[0].title === "Default Title") {
        return this.$(".product-options").addClass("no-options");
      } else {
        if (this.product.options.length === 1 && this.product.options[0] !== "Title") {
          this.$(".selector-wrapper").prepend("<label>" + this.product.options[0] + "</label>");
        }
        ref = this.$(".selector-wrapper");
        results = [];
        for (i = j = 0, len = ref.length; j < len; i = ++j) {
          selector = ref[i];
          value = $(selector).find("select").val();
          results.push($(selector).find("select").wrap("<div class='select-wrapper' />").parent().prepend("<div class='select-text'>" + value + "</div>"));
        }
        return results;
      }
    };

    ProductView.prototype.updateVariantLabel = function(e, select) {
      var selectedVariant;
      select = e ? e.target : select;
      select = $(select);
      selectedVariant = select.find("option:selected").val();
      return select.prev(".select-text").html(selectedVariant);
    };

    ProductView.prototype.selectCallback = function(variant, selector) {
      var addToCartButton, newImage;
      addToCartButton = this.$(".add-to-cart");
      if (variant) {
        this.$(".product-price").removeClass("unavailable");
        if (variant.available) {
          addToCartButton.val({{ "products.product.add_to_cart" | t | json }}).removeClass("disabled").prop("disabled", false);
        } else {
          addToCartButton.val({{ "products.product.sold_out" | t | json }}).addClass("disabled").prop("disabled", true);
        }
        this.minimumPriceArea.html(Shopify.formatMoney(variant.price, Shop.moneyFormat));
        this.$(".product-price-compare").remove();
        if (variant.compare_at_price > variant.price) {
          this.minimumPriceArea.after("<span class='product-price-compare money' />");
          this.$(".product-price-compare").html(Shopify.formatMoney(variant.compare_at_price, Shop.moneyFormat));
        }
        if (Pacific.settings["enable-currency-switcher"]) {
          this.switchCurrency(variant.price, variant.compare_at_price);
        }

        if (variant && variant.featured_image) {
          newImage = variant.featured_image;
          if (this.$(".product-images").length) {
            return this.swapImage(null, newImage.src);
          }
        }


        if (variant.barcode !== '') {
          $("#barcodefield").html('UPC / GTIN: ' + variant.barcode);
          console.log(variant.barcode)
    	}
    	else {
          $("#barcodefield").html('');
    	}

      } else {
        this.$(".product-price").addClass("unavailable");
        return addToCartButton.val({{ "products.product.unavailable" | t | json }}).addClass("disabled").prop("disabled", true);
      }
    };

    ProductView.prototype.addToCart = function(e) {
      if (Pacific.settings["disable-ajax"]) {
        return;
      }
      e.preventDefault();
      if (!this.addingToCart) {
        this.addingToCart = true;
        this.$(".error-message").remove();
        return Shopify.addItemFromForm("product-form", (function(_this) {
          _this.addingToCart = false;

          return function(data) {
            var message;
            if (!Pacific.settings["product-send-to-cart"]) {
              _this.$(".cart-count").addClass("active-cart");
              {% raw %}
              message = "{{ product }} has been successfully added to your {{ cart_link }}. Feel free to {{ continue_link }} or {{ checkout_link }}.".replace("{{ product }}", "" + _this.product.title).replace("{{ cart_link }}", "<a href='/cart'>cart</a>").replace("{{ continue_link }}", "<a href='/collections/all'>continue shopping</a>").replace("{{ checkout_link }}", "<a href='/checkout'>check out</a>");
              {% endraw %}
              return setTimeout(function() {
                _this.$el.find(".product-message").html(message).addClass("success-message").removeClass("error-message");
                return _this.updateCart(data);
              }, 500);
            } else {
              return window.location.href = "/cart";
            }
          };
        })(this));
      }
    };

    ProductView.prototype.updateCart = function(newItem) {
      return Shopify.getCart((function(_this) {
        return function(cart) {
          var cartCount, cartCountText, ref;
          cartCount = cart.item_count;
          cartCountText = cart.item_count === 1 ? "item" : "items";
          $(".bag-count").text(cart.item_count);
          $(".bag-text").html(Shopify.formatMoney(cart.total_price, Shop.moneyFormat));
          ref = cart.items;

          var delivery_text;
          if (cart.total_price < parseInt({{ settings.fdb-amount}})) {
            var remain_delivery_total = Shopify.formatMoney((parseInt({{ settings.fdb-amount}}) - cart.total_price), Shop.moneyFormat);
            delivery_text = "{{ settings.fdb-text }}";
            delivery_text = delivery_text.replace('{amount}', remain_delivery_total);
          } else {
            delivery_text = "{{ settings.fdb-free-text }}";
          }
          $('.fdb-content').html(delivery_text);
          $('.fdb-wrapper').slideDown(500);
          setTimeout(function(){
            $('.fdb-wrapper').slideUp(500);
          }, {{settings.fdb-delay}});
        };
      })(this));
    };

    ProductView.prototype.handleErrors = function(error) {
      var max, message, target, variant, variantID;
      if (error.responseJSON.message === "Cart Error") {
        variantID = parseInt(this.$("#product-variants").val(), 10);
        target = (function() {
          var j, len, ref, results;
          ref = this.product.variants;
          results = [];
          for (j = 0, len = ref.length; j < len; j++) {
            variant = ref[j];
            if (variant.id === variantID) {
              results.push(variant);
            }
          }
          return results;
        }).call(this);
        max = target[0].inventory_quantity;
        message = "{{ 'products.product.error_message_stock' | t | escape }}".replace("{% raw %}{{ stock }}{% endraw %}", max);
      } else {
        message = "{{ 'products.product.error_message_general' | t | escape }}".replace("{% raw %}{{ stock }}{% endraw %}", max);
      }
      return this.$(".product-form").append("<div class=\"error-message\">" + message + "</div>");
    };

    return ProductView;

  })(Backbone.View);

}).call(this);

(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  window.RTEView = (function(superClass) {
    extend(RTEView, superClass);

    function RTEView() {
      return RTEView.__super__.constructor.apply(this, arguments);
    }

    RTEView.prototype.events = {
      "click .tabs li": "switchTabs",
      "change .select-wrapper select": "updateOption"
    };

    RTEView.prototype.initialize = function() {
      var i, len, results, select, selects;
      this.setupTabs();
      this.$el.fitVids({
        customSelector: "iframe"
      });
      selects = this.$("select");
      results = [];
      for (i = 0, len = selects.length; i < len; i++) {
        select = selects[i];
        if (!$(select).parent(".select-wrapper").length) {
          $(select).wrap('<div class="select-wrapper" />').parent().prepend("<span class='selected-text'></span>");
        }
        results.push(this.updateOption(null, select));
      }
      return results;
    };

    RTEView.prototype.switchTabs = function(e) {
      var position, tab;
      tab = $(e.currentTarget);
      position = tab.index();
      this.tabs.removeClass("active");
      this.tabsContent.removeClass("active");
      tab.addClass("active");
      this.tabsContent.eq(position).addClass("active");
      return e.preventDefault();
    };

    RTEView.prototype.setupTabs = function() {
      this.tabs = this.$(".tabs > li");
      this.tabsContent = this.$(".tabs-content > li");
      this.tabs.first().addClass("active");
      return this.tabsContent.first().addClass("active");
    };

    RTEView.prototype.updateOption = function(e, selector) {
      var newOption, select;
      select = e ? $(e.target) : $(selector);
      newOption = select.find("option:selected").text();
      return select.siblings(".selected-text").text(newOption);
    };

    return RTEView;

  })(Backbone.View);

}).call(this);

(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  window.GiftCardView = (function(superClass) {
    extend(GiftCardView, superClass);

    function GiftCardView() {
      return GiftCardView.__super__.constructor.apply(this, arguments);
    }

    GiftCardView.prototype.initialize = function() {
      return this.addQrCode();
    };

    GiftCardView.prototype.addQrCode = function() {
      var qrWrapper;
      qrWrapper = $('[data-qr-code]');
      return new QRCode(qrWrapper[0], {
        text: qrWrapper.data('qr-code'),
        width: 120,
        height: 120
      });
    };

    return GiftCardView;

  })(Backbone.View);

}).call(this);

(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  window.ThemeView = (function(superClass) {
    extend(ThemeView, superClass);

    function ThemeView() {
      return ThemeView.__super__.constructor.apply(this, arguments);
    }

    ThemeView.prototype.el = document.body;

    ThemeView.prototype.initialize = function() {
      var body;
      body = $(document.body);
      this.isHome = body.hasClass("template-index");
      this.isCollection = body.hasClass("template-collection");
      this.isListCollections = body.hasClass("template-list-collections");
      this.isProduct = body.hasClass("template-product");
      this.isCart = body.hasClass("template-cart");
      this.isPage = body.hasClass("template-page");
      this.isPassword = body.hasClass("template-password");
      this.isGiftCardPage = body.hasClass("gift-card-template");
      this.isAccount = body.attr("class").indexOf("-customers-") > 0;
      window.Pacific = {};
      return Pacific.settings = {{ settings | json }};
    };

    ThemeView.prototype.render = function() {
      var i, len, ref, rte;
      new HeaderView({
        el: $(".main-header")
      });
      new NavigationView({
        el: $(".navigation")
      });
      new FooterView({
        el: $("footer")
      });
      ref = $(".rte");
      for (i = 0, len = ref.length; i < len; i++) {
        rte = ref[i];
        new RTEView({
          el: rte
        });
      }
      if (Pacific.settings["enable-currency-switcher"]) {
        new CurrencyView({
          el: this.$(".currency-switcher")
        });
      }
      if (Pacific.settings["enable-sidebar"]) {
        new SidebarView({
          el: this.$(".sidebar")
        });
      }
      if (this.isHome) {
        new HomeView({
          el: this.$el
        });
      }
      if (this.isCollection) {
        new CollectionView({
          el: this.$el
        });
      }
      if (this.isListCollections) {
        new ListCollectionsView({
          el: $(".collections-list")
        });
      }
      if (this.isProduct) {
        new ProductView({
          el: this.$el
        });
      }
      if (this.isCart) {
        new CartView({
          el: this.$el
        });
      }
      if (this.isAccount) {
        new AccountView({
          el: this.$el
        });
      }
      if (this.isPassword) {
        new PasswordView({
          el: this.$el
        });
      }
      if (this.isGiftCardPage) {
        new GiftCardView();
      }
      if ($("html").hasClass("lt-ie10")) {
        return this.inputPlaceholderFix();
      }
    };

    ThemeView.prototype.inputPlaceholderFix = function() {
      var i, input, len, placeholders, text;
      placeholders = $("[placeholder]");
      for (i = 0, len = placeholders.length; i < len; i++) {
        input = placeholders[i];
        input = $(input);
        if (!(input.val().length > 0)) {
          text = input.attr("placeholder");
          input.attr("value", text);
          input.data("original-text", text);
        }
      }
      placeholders.focus(function() {
        input = $(this);
        if (input.val() === input.data("original-text")) {
          return input.val("");
        }
      });
      return placeholders.blur(function() {
        input = $(this);
        if (input.val().length === 0) {
          return input.val(input.data("original-text"));
        }
      });
    };

    return ThemeView;

  })(Backbone.View);

  $(function() {
    window.theme = new ThemeView();
    return theme.render();
  });

}).call(this);

 $(document).ready(function(){


    $('.responsive').slick({
      dots: true,
      infinite: false,
      arrows: false,
      speed: 300,
      slidesToShow: 3,
      slidesToScroll: 3,
      responsive: [
        {
          breakpoint: 668,
          settings: {
            slidesToShow: 2,
            slidesToScroll: 2
          }
        }
      ]
    });

    $('.home-module-inline-items-blog').slick({
      dots: true,
      infinite: false,
      arrows: false,
      speed: 600,
      slidesToShow: 3,
      slidesToScroll: 3,
      responsive: [
        {
          breakpoint: 668,
          settings: {
            slidesToShow: 1,
            slidesToScroll: 1
          }
        }
      ]
    });


    $('.asfeat-slider').slick({
      dots: true,
      infinite: false,
      arrows: false,
      speed: 800,
      slidesToShow: 5,
      slidesToScroll: 2,
      responsive: [
        {
          breakpoint: 668,
          settings: {
            slidesToShow: 2,
            slidesToScroll: 2
          }
        }
      ]
    });


    //-- Mobile sticky header
    if ( $('.main-header-wrapper').length != 0 && $(window).width() < 768 )
    {
      $('.main-header-wrapper').stick_in_parent();
      console.log('Yes this works inside');
    }

    console.log('Yes this works');


    if($(window).width() < 668) {
     {% comment %}  $('.home-featured-products-list').slick({
        dots: true,
        infinite: false,
        arrows: false,
        speed: 300,
        slidesToShow: 2,
        slidesToScroll: 2,
        adaptiveHeight: true
      }); {% endcomment %}

      $('.landing-page .collections-list').slick({
        dots: true,
        infinite: false,
        arrows: false,
        speed: 300,
        slidesToShow: 2,
        slidesToScroll: 2,
        adaptiveHeight: true
      });
    }

    {% comment %}
    $('.review-slider').slick({
      slidesToShow: 3,
      slidesToScroll: 1,
      arrows: true,
      infinite: true,
      prevArrow: '<button type="button" class="slideshow-navigation slick-prev"><span>&#57361;</span></button>',
      nextArrow: '<button type="button" class="slideshow-navigation slick-next"><span>&#57362;</span></button>'
    }); {% endcomment %}


    //-- Filtering drodpowns
    $('.dropdown .btn-filter').on('click', function(e){
      e.preventDefault();

      var drop = $(this).parent('.dropdown');
      drop.toggleClass('open');
    });

    $('body').on('click', function(e){

      var target = $(e.target);
      if ( !target.hasClass('btn-filter') && target.parents('.dropdown').length == 0 )
      {
        $('.dropdown').removeClass('open');
      }
    });


    //BLOG INFINITE SCROLL
    if($('#scroll').length > 0 && $('.pagination .pagination-next a').length > 0) {
        $('#scroll').jscroll({
            loadingHtml: '<ul class="pagination"><li><a class="button">Loading...</a></li></ul>',
            padding: 20,
            nextSelector: '.pagination .pagination-next a',
            contentSelector: '.blog-posts',
            autoTrigger: false
        });
    }

   $(".modify-sub").on('click',function(){
      var id = $(this).attr('data-id');
      var current_value = $(this).attr('data-value');
      $("#modify-box-"+id).slideDown('fast');
      $("#every-"+id).hide();
      $(".current-weeks-"+id).hide();
      $("#weeks_"+id).val(current_value);
      $(this).hide();
      return false;
    });

   $(".modify-sub-box>.btn-cancel").on('click',function(){
     var id = $(this).attr('data-id');
      $("#modify-box-"+id).slideUp('fast');
            $("#modify-sub-"+id).show();
            $("#every-"+id).show();
        $(".current-weeks-"+id).show();
   });

   $(".modify-sub-box>.btn-update").on('click',function(){
      var id = $(this).attr('data-id');
      var qty = $(".variant-"+id).find('.cart-item-quantity-display').val();
      var $group_id = $(".variant-"+id).find('[name$="[group_id]"]');
      var $ro_price = $(".variant-"+id).find('[name$="[_ro_unformatted_price]"]');
      btn = $(this);
      var new_weeks = $("#weeks_"+id).val();
      btn.attr('disabled','disabled').html('Updating...');

     $.ajax({ url: '/cart/change', type: 'POST', dataType:'json', data: { id: id, quantity:0 }, success: function(){

       if(new_weeks == '-1'){
         var json_data = {
           id: id ,
           quantity: qty,
           recurring_radio_btn: 2
         };
       }else{

       var json_data = {
         id: id ,
         quantity: qty,
         properties: {
           group_id: $group_id.val(),
           _ro_unformatted_price: $ro_price.val(),
           frequency_type: 2,
           frequency_num: new_weeks,
           frequency_type_text : 'Week (s)'
         },
         recurring_radio_btn: 2
       };

       }


        $.ajax({ url:'/cart/add.js', type: 'POST', dataType: 'json', data: json_data , success: function(cart){
            /// When Update Successfully
            $("#prod_index_"+id).val(new_weeks);
            $("#current-weeks-"+id).html(new_weeks);
            btn.removeAttr("disabled").html("UPDATE");
          if(new_weeks!='-1'){
            $("#every-"+id).show();
            $(".current-weeks-"+id).show();
          }
          $("#modify-sub-"+id).show();
          $("#modify-box-"+id).slideUp('fast');
          window.location = '/cart';
         }});

     }});
   });


	// The following code will update the subscription of entire
   	// cart at once. User have an option to update entire cart at once.

    $("#update_all").on('click',function(){
      btn = $(this);
      var total_weeks = $("#total_weeks").val();
      var total_products_varriant_ids = $('.cart-item').map(function () {
        if (!($(this).attr('data-variant') == ""))
        	return $(this).attr('data-variant');
      });
      btn.attr('disabled','disabled').html('Updating...');
      var total_product_quantities = [];
      var variant_ids = [];
      var products = []
      for(var i = 0 ; i < total_products_varriant_ids.length ; i++){
        var $group_id = $(".variant-"+total_products_varriant_ids[i]).find('[name$="[group_id]"]');
        var $ro_price = $(".variant-"+total_products_varriant_ids[i]).find('[name$="[_ro_unformatted_price]"]')
        products[i] = {
          vid: total_products_varriant_ids[i],
          gid: $group_id.val(),
          ro_price: $ro_price.val(),
          weeks:total_weeks ,
          quantity: $(".variant-"+total_products_varriant_ids[i]).find('.cart-item-quantity-display').val()
        }
      }
      $.ajax({ url: '/cart/clear.js', type: 'POST', dataType:'json', success: function(){
        function addtocart(pro){
          if(pro.length == 0)
          window.location = '/cart';
          else{
            var details = pro.shift();
            if(details.weeks == '-1'){
              var json_data = {
                id: details.vid,
                quantity: details.quantity,
                recurring_radio_btn: 0
              };
            }else{
              var json_data = {
                id: details.vid ,
                quantity: details.quantity,
                properties: {
                  group_id: details.gid,
                  _ro_unformatted_price: details.ro_price,
                  frequency_type: 2,
                  frequency_num: total_weeks,
                  frequency_type_text : 'Week (s)'
                },
                recurring_radio_btn: 2
              }
            }
            var request = $.ajax({ url:'/cart/add.js', type: 'POST', dataType: 'json', data: json_data , success: function(cart){
              addtocart(pro)
            }});
          }
        }
        addtocart(products);
      }});
    });

    $('.stepper-control').on('click', function(e) {
      if ($(this).hasClass('plus')) {
        var quantity = parseInt($(this).prev("input").val());
        quantity += 1;
        $(this).prev("input").val(quantity);
      } else {
        var quantity = parseInt($(this).next("input").val());
        quantity -= 1;
        if ( quantity <= 0 ) {
          quantity = 1;
        }
        $(this).next("input").val(quantity);
      }
      e.stopPropagation();
      e.preventDefault();
      return false;
    });

  $('#tab-container').easytabs();

  $('body').on('click', '.faq-q', function(){
    var container = $(this).parent();
    var answer = container.find('.faq-a');
    var trigger = container.find('.faq-t');
    answer.slideToggle(200);
    if (!trigger.hasClass('active')) {
      trigger.addClass('active').html('&and;');
    } else {
      trigger.removeClass('active').html('&or;');
    }
  });

  $('.collection-filtering .list-checks div.check').on('click', function() {
    window.location.href = $(this).next().attr('href');
  });

  $('.product-detail-view-more').on('click', function(){
    $(this).parents('.brief').hide();
    $(this).parents('.product-description').find('.detail').show();
  });


  //-- Mobile menu control
  $('.mobile-navigation-toggle').on('click', function(){
    $('body').toggleClass('menuvisible');
  });

  $('.btn-closemenu').on('click', function(){
    $('body').removeClass('menuvisible');
    $('.mobile-navigation-toggle').removeClass('active');
  });


  //-- Mobile filters control
  $('.btn-showfilters').on('click', function(){
    $('body').toggleClass('showfilters');
  });

  $('.btn-closefilters').on('click', function(){
    $('body').removeClass('showfilters');
  });


  //-- Footer mobile menu control
  $('.btn-footermenumobile').on('click', function(e){
    e.preventDefault();

    var subMenu = $(this).next('.collapse');
    subMenu.toggle();
  });




   $(document).on('click','.sh-cart-add',function(){
      var product_id = $(this).attr('data-id');
      var v_id    = $(this).attr('data-vid');
      var product = $("#prod_"+product_id);
      var old_qty   = parseFloat(product.attr('data-qty'));
      var new_qty   = old_qty + 1;
      var line_no  = $('#prod_'+product_id+' .sh-cart-buttons').data('line');

     if(new_qty==1){

       // properties[frequency_num]=2&properties[frequency_type]=2

       var json_data = {
         id: v_id ,
         quantity: 1,
//          properties: {
//            frequency_type: 2,
//            frequency_num: 1,
//            frequency_type_text : 'Week (s)'
//          },
//          recurring_radio_btn: 2
         recurring_radio_btn: 0
       };


       console.log(json_data);
       $.ajax({ url:'/cart/add.js', type: 'POST', dataType: 'json', data: json_data , success: function(cart){
          product.find('.product-list-item-thumbnail>a').append('<span class="sh-cart-wrapper"><span class="sh-cart-wrapper-inner"><span class="sh-counter">1</span><span class="sh-heading">In your basket</span></span></span>');
          product.attr('data-qty',new_qty);
          product.find(".sh-cart-buttons").append('<span data-vid="'+v_id+'" data-id="'+product_id+'" class="product-list-item-badge sh-cart-remove"><i class="milkicon-minus"></i></span>');

       }});
     }else{
       if (line_no == ""){
         $.ajax({ url:'/cart/change.js', type: 'POST', dataType: 'json', data: { id: v_id , quantity: new_qty } , success: function(cart){
            product.attr('data-qty',new_qty);
            product.find('.sh-counter').fadeOut('fast',function(){
                product.find('.sh-counter').html(new_qty);
                product.find('.sh-counter').fadeIn('fast');
               });
         }});

       }else{
         $.ajax({ url:'/cart/change.js', type: 'GET', dataType: 'json', data: { line: line_no , quantity: new_qty } , success: function(cart){
            product.attr('data-qty',new_qty);
            product.find('.sh-counter').fadeOut('fast',function(){
                product.find('.sh-counter').html(new_qty);
                product.find('.sh-counter').fadeIn('fast');
               });
         }});
       }
     }

     $(".bag-count").html( parseFloat($(".bag-count").html()) + 1 );
     updatePrice();
   });

   $(document).on('click','.sh-cart-remove',function(){
     var product_id = $(this).attr('data-id');
     var v_id     = $(this).attr('data-vid');
     var product  = $("#prod_"+product_id);
     var old_qty  = parseFloat(product.attr('data-qty'));
     var new_qty  = old_qty - 1;
     var line_no  = $('#prod_'+product_id+' .sh-cart-buttons').data('line');

     /// Let's Send Ajax Request
     if (line_no == ""){

       $.ajax({
         type: 'POST',
         url: '/cart/change.js',
         dataType: 'json',
         data: { id: v_id, quantity: new_qty },
         success: function(cart){
           product.attr('data-qty',new_qty);
           if(new_qty == 0){
              product.find(".sh-cart-wrapper").hide("slow");
              product.find(".sh-cart-remove").hide(0);
           }else{
              product.attr('data-qty',new_qty);
              product.find('.sh-counter').fadeOut('fast',function(){
                product.find('.sh-counter').html(new_qty);
                product.find('.sh-counter').fadeIn('fast');
              });
           }
         }
        });

     } else {
       $.ajax({
         type: 'GET',
         url: '/cart/change.js',
         dataType: 'json',
         data: { line: line_no, quantity: new_qty },
         success: function(cart){
           product.attr('data-qty',new_qty);
           if(new_qty == 0){
              product.find(".sh-cart-wrapper").hide("slow");
              product.find(".sh-cart-remove").hide(0);
           }else{
              product.attr('data-qty',new_qty);
              product.find('.sh-counter').fadeOut('fast',function(){
                product.find('.sh-counter').html(new_qty);
                product.find('.sh-counter').fadeIn('fast');
              });
           }
         }
       });
     }


     $(".bag-count").html( parseFloat($(".bag-count").html()) - 1 );
     updatePrice();
   });

    $.ajax({
        type: 'GET',
        url: '/cart.js',
        dataType: 'json',
        data: {},
        success: function(cart) {

          if(cart.item_count != 0){

            $.each(cart.items,function(index,data){
              var product_id = "#prod_"+data.product_id;
              if ($(product_id+' .sh-cart-wrapper').length == 0){
                var html = '<span class="sh-cart-wrapper">';
                    html += '<span class="sh-cart-wrapper-inner">'
                  	html += '<span class="sh-counter">'+data.quantity+'</span>';
                  	html += '<span class="sh-heading">In your basket</span>';
                	html += '</span></span>';
              	$("#prod_"+data.product_id).find(".product-list-item-thumbnail>a").append(html);
                $("#prod_"+data.product_id).find(".sh-cart-buttons").append('<span data-vid="'+data.id+'" data-id="'+data.product_id+'" class="product-list-item-badge sh-cart-remove"><i class="milkicon-minus"></i></span>');
                $("#prod_"+data.product_id).find(".sh-cart-add").attr('data-vid',data.id);
                $("#prod_"+data.product_id).attr('data-qty',data.quantity);
                $(product_id+' .sh-cart-buttons').data('line',index+1);
              }
            });

          }

        },
        error: function(response) {
            console.log(response);
        }
    });


  });

function updatePrice(){

   $.ajax({
     url : '/cart.js',
     type: 'GET',
     dataType: 'json',
     data: {},
     success: function (cart){
      var price = cart.total_price;
        price = price / 100;
        $(".bag-text").html('$ '+ price.toFixed(2));
     }
   });

}


/*
 * Slick.js v1.5.9
 */
!function(a){"use strict";"function"==typeof define&&define.amd?define(["jquery"],a):"undefined"!=typeof exports?module.exports=a(require("jquery")):a(jQuery)}(function(a){"use strict";var b=window.Slick||{};b=function(){function c(c,d){var f,e=this;e.defaults={accessibility:!0,adaptiveHeight:!1,appendArrows:a(c),appendDots:a(c),arrows:!0,asNavFor:null,prevArrow:'<button type="button" data-role="none" class="slick-prev" aria-label="Previous" tabindex="0" role="button">Previous</button>',nextArrow:'<button type="button" data-role="none" class="slick-next" aria-label="Next" tabindex="0" role="button">Next</button>',autoplay:!1,autoplaySpeed:3e3,centerMode:!1,centerPadding:"50px",cssEase:"ease",customPaging:function(a,b){return'<button type="button" data-role="none" role="button" aria-required="false" tabindex="0">'+(b+1)+"</button>"},dots:!1,dotsClass:"slick-dots",draggable:!0,easing:"linear",edgeFriction:.35,fade:!1,focusOnSelect:!1,infinite:!0,initialSlide:0,lazyLoad:"ondemand",mobileFirst:!1,pauseOnHover:!0,pauseOnDotsHover:!1,respondTo:"window",responsive:null,rows:1,rtl:!1,slide:"",slidesPerRow:1,slidesToShow:1,slidesToScroll:1,speed:500,swipe:!0,swipeToSlide:!1,touchMove:!0,touchThreshold:5,useCSS:!0,useTransform:!0,variableWidth:!1,vertical:!1,verticalSwiping:!1,waitForAnimate:!0,zIndex:1e3},e.initials={animating:!1,dragging:!1,autoPlayTimer:null,currentDirection:0,currentLeft:null,currentSlide:0,direction:1,$dots:null,listWidth:null,listHeight:null,loadIndex:0,$nextArrow:null,$prevArrow:null,slideCount:null,slideWidth:null,$slideTrack:null,$slides:null,sliding:!1,slideOffset:0,swipeLeft:null,$list:null,touchObject:{},transformsEnabled:!1,unslicked:!1},a.extend(e,e.initials),e.activeBreakpoint=null,e.animType=null,e.animProp=null,e.breakpoints=[],e.breakpointSettings=[],e.cssTransitions=!1,e.hidden="hidden",e.paused=!1,e.positionProp=null,e.respondTo=null,e.rowCount=1,e.shouldClick=!0,e.$slider=a(c),e.$slidesCache=null,e.transformType=null,e.transitionType=null,e.visibilityChange="visibilitychange",e.windowWidth=0,e.windowTimer=null,f=a(c).data("slick")||{},e.options=a.extend({},e.defaults,f,d),e.currentSlide=e.options.initialSlide,e.originalSettings=e.options,"undefined"!=typeof document.mozHidden?(e.hidden="mozHidden",e.visibilityChange="mozvisibilitychange"):"undefined"!=typeof document.webkitHidden&&(e.hidden="webkitHidden",e.visibilityChange="webkitvisibilitychange"),e.autoPlay=a.proxy(e.autoPlay,e),e.autoPlayClear=a.proxy(e.autoPlayClear,e),e.changeSlide=a.proxy(e.changeSlide,e),e.clickHandler=a.proxy(e.clickHandler,e),e.selectHandler=a.proxy(e.selectHandler,e),e.setPosition=a.proxy(e.setPosition,e),e.swipeHandler=a.proxy(e.swipeHandler,e),e.dragHandler=a.proxy(e.dragHandler,e),e.keyHandler=a.proxy(e.keyHandler,e),e.autoPlayIterator=a.proxy(e.autoPlayIterator,e),e.instanceUid=b++,e.htmlExpr=/^(?:\s*(<[\w\W]+>)[^>]*)$/,e.registerBreakpoints(),e.init(!0),e.checkResponsive(!0)}var b=0;return c}(),b.prototype.addSlide=b.prototype.slickAdd=function(b,c,d){var e=this;if("boolean"==typeof c)d=c,c=null;else if(0>c||c>=e.slideCount)return!1;e.unload(),"number"==typeof c?0===c&&0===e.$slides.length?a(b).appendTo(e.$slideTrack):d?a(b).insertBefore(e.$slides.eq(c)):a(b).insertAfter(e.$slides.eq(c)):d===!0?a(b).prependTo(e.$slideTrack):a(b).appendTo(e.$slideTrack),e.$slides=e.$slideTrack.children(this.options.slide),e.$slideTrack.children(this.options.slide).detach(),e.$slideTrack.append(e.$slides),e.$slides.each(function(b,c){a(c).attr("data-slick-index",b)}),e.$slidesCache=e.$slides,e.reinit()},b.prototype.animateHeight=function(){var a=this;if(1===a.options.slidesToShow&&a.options.adaptiveHeight===!0&&a.options.vertical===!1){var b=a.$slides.eq(a.currentSlide).outerHeight(!0);a.$list.animate({height:b},a.options.speed)}},b.prototype.animateSlide=function(b,c){var d={},e=this;e.animateHeight(),e.options.rtl===!0&&e.options.vertical===!1&&(b=-b),e.transformsEnabled===!1?e.options.vertical===!1?e.$slideTrack.animate({left:b},e.options.speed,e.options.easing,c):e.$slideTrack.animate({top:b},e.options.speed,e.options.easing,c):e.cssTransitions===!1?(e.options.rtl===!0&&(e.currentLeft=-e.currentLeft),a({animStart:e.currentLeft}).animate({animStart:b},{duration:e.options.speed,easing:e.options.easing,step:function(a){a=Math.ceil(a),e.options.vertical===!1?(d[e.animType]="translate("+a+"px, 0px)",e.$slideTrack.css(d)):(d[e.animType]="translate(0px,"+a+"px)",e.$slideTrack.css(d))},complete:function(){c&&c.call()}})):(e.applyTransition(),b=Math.ceil(b),e.options.vertical===!1?d[e.animType]="translate3d("+b+"px, 0px, 0px)":d[e.animType]="translate3d(0px,"+b+"px, 0px)",e.$slideTrack.css(d),c&&setTimeout(function(){e.disableTransition(),c.call()},e.options.speed))},b.prototype.asNavFor=function(b){var c=this,d=c.options.asNavFor;d&&null!==d&&(d=a(d).not(c.$slider)),null!==d&&"object"==typeof d&&d.each(function(){var c=a(this).slick("getSlick");c.unslicked||c.slideHandler(b,!0)})},b.prototype.applyTransition=function(a){var b=this,c={};b.options.fade===!1?c[b.transitionType]=b.transformType+" "+b.options.speed+"ms "+b.options.cssEase:c[b.transitionType]="opacity "+b.options.speed+"ms "+b.options.cssEase,b.options.fade===!1?b.$slideTrack.css(c):b.$slides.eq(a).css(c)},b.prototype.autoPlay=function(){var a=this;a.autoPlayTimer&&clearInterval(a.autoPlayTimer),a.slideCount>a.options.slidesToShow&&a.paused!==!0&&(a.autoPlayTimer=setInterval(a.autoPlayIterator,a.options.autoplaySpeed))},b.prototype.autoPlayClear=function(){var a=this;a.autoPlayTimer&&clearInterval(a.autoPlayTimer)},b.prototype.autoPlayIterator=function(){var a=this;a.options.infinite===!1?1===a.direction?(a.currentSlide+1===a.slideCount-1&&(a.direction=0),a.slideHandler(a.currentSlide+a.options.slidesToScroll)):(a.currentSlide-1===0&&(a.direction=1),a.slideHandler(a.currentSlide-a.options.slidesToScroll)):a.slideHandler(a.currentSlide+a.options.slidesToScroll)},b.prototype.buildArrows=function(){var b=this;b.options.arrows===!0&&(b.$prevArrow=a(b.options.prevArrow).addClass("slick-arrow"),b.$nextArrow=a(b.options.nextArrow).addClass("slick-arrow"),b.slideCount>b.options.slidesToShow?(b.$prevArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"),b.$nextArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"),b.htmlExpr.test(b.options.prevArrow)&&b.$prevArrow.prependTo(b.options.appendArrows),b.htmlExpr.test(b.options.nextArrow)&&b.$nextArrow.appendTo(b.options.appendArrows),b.options.infinite!==!0&&b.$prevArrow.addClass("slick-disabled").attr("aria-disabled","true")):b.$prevArrow.add(b.$nextArrow).addClass("slick-hidden").attr({"aria-disabled":"true",tabindex:"-1"}))},b.prototype.buildDots=function(){var c,d,b=this;if(b.options.dots===!0&&b.slideCount>b.options.slidesToShow){for(d='<ul class="'+b.options.dotsClass+'">',c=0;c<=b.getDotCount();c+=1)d+="<li>"+b.options.customPaging.call(this,b,c)+"</li>";d+="</ul>",b.$dots=a(d).appendTo(b.options.appendDots),b.$dots.find("li").first().addClass("slick-active").attr("aria-hidden","false")}},b.prototype.buildOut=function(){var b=this;b.$slides=b.$slider.children(b.options.slide+":not(.slick-cloned)").addClass("slick-slide"),b.slideCount=b.$slides.length,b.$slides.each(function(b,c){a(c).attr("data-slick-index",b).data("originalStyling",a(c).attr("style")||"")}),b.$slider.addClass("slick-slider"),b.$slideTrack=0===b.slideCount?a('<div class="slick-track"/>').appendTo(b.$slider):b.$slides.wrapAll('<div class="slick-track"/>').parent(),b.$list=b.$slideTrack.wrap('<div aria-live="polite" class="slick-list"/>').parent(),b.$slideTrack.css("opacity",0),(b.options.centerMode===!0||b.options.swipeToSlide===!0)&&(b.options.slidesToScroll=1),a("img[data-lazy]",b.$slider).not("[src]").addClass("slick-loading"),b.setupInfinite(),b.buildArrows(),b.buildDots(),b.updateDots(),b.setSlideClasses("number"==typeof b.currentSlide?b.currentSlide:0),b.options.draggable===!0&&b.$list.addClass("draggable")},b.prototype.buildRows=function(){var b,c,d,e,f,g,h,a=this;if(e=document.createDocumentFragment(),g=a.$slider.children(),a.options.rows>1){for(h=a.options.slidesPerRow*a.options.rows,f=Math.ceil(g.length/h),b=0;f>b;b++){var i=document.createElement("div");for(c=0;c<a.options.rows;c++){var j=document.createElement("div");for(d=0;d<a.options.slidesPerRow;d++){var k=b*h+(c*a.options.slidesPerRow+d);g.get(k)&&j.appendChild(g.get(k))}i.appendChild(j)}e.appendChild(i)}a.$slider.html(e),a.$slider.children().children().children().css({width:100/a.options.slidesPerRow+"%",display:"inline-block"})}},b.prototype.checkResponsive=function(b,c){var e,f,g,d=this,h=!1,i=d.$slider.width(),j=window.innerWidth||a(window).width();if("window"===d.respondTo?g=j:"slider"===d.respondTo?g=i:"min"===d.respondTo&&(g=Math.min(j,i)),d.options.responsive&&d.options.responsive.length&&null!==d.options.responsive){f=null;for(e in d.breakpoints)d.breakpoints.hasOwnProperty(e)&&(d.originalSettings.mobileFirst===!1?g<d.breakpoints[e]&&(f=d.breakpoints[e]):g>d.breakpoints[e]&&(f=d.breakpoints[e]));null!==f?null!==d.activeBreakpoint?(f!==d.activeBreakpoint||c)&&(d.activeBreakpoint=f,"unslick"===d.breakpointSettings[f]?d.unslick(f):(d.options=a.extend({},d.originalSettings,d.breakpointSettings[f]),b===!0&&(d.currentSlide=d.options.initialSlide),d.refresh(b)),h=f):(d.activeBreakpoint=f,"unslick"===d.breakpointSettings[f]?d.unslick(f):(d.options=a.extend({},d.originalSettings,d.breakpointSettings[f]),b===!0&&(d.currentSlide=d.options.initialSlide),d.refresh(b)),h=f):null!==d.activeBreakpoint&&(d.activeBreakpoint=null,d.options=d.originalSettings,b===!0&&(d.currentSlide=d.options.initialSlide),d.refresh(b),h=f),b||h===!1||d.$slider.trigger("breakpoint",[d,h])}},b.prototype.changeSlide=function(b,c){var f,g,h,d=this,e=a(b.target);switch(e.is("a")&&b.preventDefault(),e.is("li")||(e=e.closest("li")),h=d.slideCount%d.options.slidesToScroll!==0,f=h?0:(d.slideCount-d.currentSlide)%d.options.slidesToScroll,b.data.message){case"previous":g=0===f?d.options.slidesToScroll:d.options.slidesToShow-f,d.slideCount>d.options.slidesToShow&&d.slideHandler(d.currentSlide-g,!1,c);break;case"next":g=0===f?d.options.slidesToScroll:f,d.slideCount>d.options.slidesToShow&&d.slideHandler(d.currentSlide+g,!1,c);break;case"index":var i=0===b.data.index?0:b.data.index||e.index()*d.options.slidesToScroll;d.slideHandler(d.checkNavigable(i),!1,c),e.children().trigger("focus");break;default:return}},b.prototype.checkNavigable=function(a){var c,d,b=this;if(c=b.getNavigableIndexes(),d=0,a>c[c.length-1])a=c[c.length-1];else for(var e in c){if(a<c[e]){a=d;break}d=c[e]}return a},b.prototype.cleanUpEvents=function(){var b=this;b.options.dots&&null!==b.$dots&&(a("li",b.$dots).off("click.slick",b.changeSlide),b.options.pauseOnDotsHover===!0&&b.options.autoplay===!0&&a("li",b.$dots).off("mouseenter.slick",a.proxy(b.setPaused,b,!0)).off("mouseleave.slick",a.proxy(b.setPaused,b,!1))),b.options.arrows===!0&&b.slideCount>b.options.slidesToShow&&(b.$prevArrow&&b.$prevArrow.off("click.slick",b.changeSlide),b.$nextArrow&&b.$nextArrow.off("click.slick",b.changeSlide)),b.$list.off("touchstart.slick mousedown.slick",b.swipeHandler),b.$list.off("touchmove.slick mousemove.slick",b.swipeHandler),b.$list.off("touchend.slick mouseup.slick",b.swipeHandler),b.$list.off("touchcancel.slick mouseleave.slick",b.swipeHandler),b.$list.off("click.slick",b.clickHandler),a(document).off(b.visibilityChange,b.visibility),b.$list.off("mouseenter.slick",a.proxy(b.setPaused,b,!0)),b.$list.off("mouseleave.slick",a.proxy(b.setPaused,b,!1)),b.options.accessibility===!0&&b.$list.off("keydown.slick",b.keyHandler),b.options.focusOnSelect===!0&&a(b.$slideTrack).children().off("click.slick",b.selectHandler),a(window).off("orientationchange.slick.slick-"+b.instanceUid,b.orientationChange),a(window).off("resize.slick.slick-"+b.instanceUid,b.resize),a("[draggable!=true]",b.$slideTrack).off("dragstart",b.preventDefault),a(window).off("load.slick.slick-"+b.instanceUid,b.setPosition),a(document).off("ready.slick.slick-"+b.instanceUid,b.setPosition)},b.prototype.cleanUpRows=function(){var b,a=this;a.options.rows>1&&(b=a.$slides.children().children(),b.removeAttr("style"),a.$slider.html(b))},b.prototype.clickHandler=function(a){var b=this;b.shouldClick===!1&&(a.stopImmediatePropagation(),a.stopPropagation(),a.preventDefault())},b.prototype.destroy=function(b){var c=this;c.autoPlayClear(),c.touchObject={},c.cleanUpEvents(),a(".slick-cloned",c.$slider).detach(),c.$dots&&c.$dots.remove(),c.$prevArrow&&c.$prevArrow.length&&(c.$prevArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display",""),c.htmlExpr.test(c.options.prevArrow)&&c.$prevArrow.remove()),c.$nextArrow&&c.$nextArrow.length&&(c.$nextArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display",""),c.htmlExpr.test(c.options.nextArrow)&&c.$nextArrow.remove()),c.$slides&&(c.$slides.removeClass("slick-slide slick-active slick-center slick-visible slick-current").removeAttr("aria-hidden").removeAttr("data-slick-index").each(function(){a(this).attr("style",a(this).data("originalStyling"))}),c.$slideTrack.children(this.options.slide).detach(),c.$slideTrack.detach(),c.$list.detach(),c.$slider.append(c.$slides)),c.cleanUpRows(),c.$slider.removeClass("slick-slider"),c.$slider.removeClass("slick-initialized"),c.unslicked=!0,b||c.$slider.trigger("destroy",[c])},b.prototype.disableTransition=function(a){var b=this,c={};c[b.transitionType]="",b.options.fade===!1?b.$slideTrack.css(c):b.$slides.eq(a).css(c)},b.prototype.fadeSlide=function(a,b){var c=this;c.cssTransitions===!1?(c.$slides.eq(a).css({zIndex:c.options.zIndex}),c.$slides.eq(a).animate({opacity:1},c.options.speed,c.options.easing,b)):(c.applyTransition(a),c.$slides.eq(a).css({opacity:1,zIndex:c.options.zIndex}),b&&setTimeout(function(){c.disableTransition(a),b.call()},c.options.speed))},b.prototype.fadeSlideOut=function(a){var b=this;b.cssTransitions===!1?b.$slides.eq(a).animate({opacity:0,zIndex:b.options.zIndex-2},b.options.speed,b.options.easing):(b.applyTransition(a),b.$slides.eq(a).css({opacity:0,zIndex:b.options.zIndex-2}))},b.prototype.filterSlides=b.prototype.slickFilter=function(a){var b=this;null!==a&&(b.$slidesCache=b.$slides,b.unload(),b.$slideTrack.children(this.options.slide).detach(),b.$slidesCache.filter(a).appendTo(b.$slideTrack),b.reinit())},b.prototype.getCurrent=b.prototype.slickCurrentSlide=function(){var a=this;return a.currentSlide},b.prototype.getDotCount=function(){var a=this,b=0,c=0,d=0;if(a.options.infinite===!0)for(;b<a.slideCount;)++d,b=c+a.options.slidesToScroll,c+=a.options.slidesToScroll<=a.options.slidesToShow?a.options.slidesToScroll:a.options.slidesToShow;else if(a.options.centerMode===!0)d=a.slideCount;else for(;b<a.slideCount;)++d,b=c+a.options.slidesToScroll,c+=a.options.slidesToScroll<=a.options.slidesToShow?a.options.slidesToScroll:a.options.slidesToShow;return d-1},b.prototype.getLeft=function(a){var c,d,f,b=this,e=0;return b.slideOffset=0,d=b.$slides.first().outerHeight(!0),b.options.infinite===!0?(b.slideCount>b.options.slidesToShow&&(b.slideOffset=b.slideWidth*b.options.slidesToShow*-1,e=d*b.options.slidesToShow*-1),b.slideCount%b.options.slidesToScroll!==0&&a+b.options.slidesToScroll>b.slideCount&&b.slideCount>b.options.slidesToShow&&(a>b.slideCount?(b.slideOffset=(b.options.slidesToShow-(a-b.slideCount))*b.slideWidth*-1,e=(b.options.slidesToShow-(a-b.slideCount))*d*-1):(b.slideOffset=b.slideCount%b.options.slidesToScroll*b.slideWidth*-1,e=b.slideCount%b.options.slidesToScroll*d*-1))):a+b.options.slidesToShow>b.slideCount&&(b.slideOffset=(a+b.options.slidesToShow-b.slideCount)*b.slideWidth,e=(a+b.options.slidesToShow-b.slideCount)*d),b.slideCount<=b.options.slidesToShow&&(b.slideOffset=0,e=0),b.options.centerMode===!0&&b.options.infinite===!0?b.slideOffset+=b.slideWidth*Math.floor(b.options.slidesToShow/2)-b.slideWidth:b.options.centerMode===!0&&(b.slideOffset=0,b.slideOffset+=b.slideWidth*Math.floor(b.options.slidesToShow/2)),c=b.options.vertical===!1?a*b.slideWidth*-1+b.slideOffset:a*d*-1+e,b.options.variableWidth===!0&&(f=b.slideCount<=b.options.slidesToShow||b.options.infinite===!1?b.$slideTrack.children(".slick-slide").eq(a):b.$slideTrack.children(".slick-slide").eq(a+b.options.slidesToShow),c=b.options.rtl===!0?f[0]?-1*(b.$slideTrack.width()-f[0].offsetLeft-f.width()):0:f[0]?-1*f[0].offsetLeft:0,b.options.centerMode===!0&&(f=b.slideCount<=b.options.slidesToShow||b.options.infinite===!1?b.$slideTrack.children(".slick-slide").eq(a):b.$slideTrack.children(".slick-slide").eq(a+b.options.slidesToShow+1),c=b.options.rtl===!0?f[0]?-1*(b.$slideTrack.width()-f[0].offsetLeft-f.width()):0:f[0]?-1*f[0].offsetLeft:0,c+=(b.$list.width()-f.outerWidth())/2)),c},b.prototype.getOption=b.prototype.slickGetOption=function(a){var b=this;return b.options[a]},b.prototype.getNavigableIndexes=function(){var e,a=this,b=0,c=0,d=[];for(a.options.infinite===!1?e=a.slideCount:(b=-1*a.options.slidesToScroll,c=-1*a.options.slidesToScroll,e=2*a.slideCount);e>b;)d.push(b),b=c+a.options.slidesToScroll,c+=a.options.slidesToScroll<=a.options.slidesToShow?a.options.slidesToScroll:a.options.slidesToShow;return d},b.prototype.getSlick=function(){return this},b.prototype.getSlideCount=function(){var c,d,e,b=this;return e=b.options.centerMode===!0?b.slideWidth*Math.floor(b.options.slidesToShow/2):0,b.options.swipeToSlide===!0?(b.$slideTrack.find(".slick-slide").each(function(c,f){return f.offsetLeft-e+a(f).outerWidth()/2>-1*b.swipeLeft?(d=f,!1):void 0}),c=Math.abs(a(d).attr("data-slick-index")-b.currentSlide)||1):b.options.slidesToScroll},b.prototype.goTo=b.prototype.slickGoTo=function(a,b){var c=this;c.changeSlide({data:{message:"index",index:parseInt(a)}},b)},b.prototype.init=function(b){var c=this;a(c.$slider).hasClass("slick-initialized")||(a(c.$slider).addClass("slick-initialized"),c.buildRows(),c.buildOut(),c.setProps(),c.startLoad(),c.loadSlider(),c.initializeEvents(),c.updateArrows(),c.updateDots()),b&&c.$slider.trigger("init",[c]),c.options.accessibility===!0&&c.initADA()},b.prototype.initArrowEvents=function(){var a=this;a.options.arrows===!0&&a.slideCount>a.options.slidesToShow&&(a.$prevArrow.on("click.slick",{message:"previous"},a.changeSlide),a.$nextArrow.on("click.slick",{message:"next"},a.changeSlide))},b.prototype.initDotEvents=function(){var b=this;b.options.dots===!0&&b.slideCount>b.options.slidesToShow&&a("li",b.$dots).on("click.slick",{message:"index"},b.changeSlide),b.options.dots===!0&&b.options.pauseOnDotsHover===!0&&b.options.autoplay===!0&&a("li",b.$dots).on("mouseenter.slick",a.proxy(b.setPaused,b,!0)).on("mouseleave.slick",a.proxy(b.setPaused,b,!1))},b.prototype.initializeEvents=function(){var b=this;b.initArrowEvents(),b.initDotEvents(),b.$list.on("touchstart.slick mousedown.slick",{action:"start"},b.swipeHandler),b.$list.on("touchmove.slick mousemove.slick",{action:"move"},b.swipeHandler),b.$list.on("touchend.slick mouseup.slick",{action:"end"},b.swipeHandler),b.$list.on("touchcancel.slick mouseleave.slick",{action:"end"},b.swipeHandler),b.$list.on("click.slick",b.clickHandler),a(document).on(b.visibilityChange,a.proxy(b.visibility,b)),b.$list.on("mouseenter.slick",a.proxy(b.setPaused,b,!0)),b.$list.on("mouseleave.slick",a.proxy(b.setPaused,b,!1)),b.options.accessibility===!0&&b.$list.on("keydown.slick",b.keyHandler),b.options.focusOnSelect===!0&&a(b.$slideTrack).children().on("click.slick",b.selectHandler),a(window).on("orientationchange.slick.slick-"+b.instanceUid,a.proxy(b.orientationChange,b)),a(window).on("resize.slick.slick-"+b.instanceUid,a.proxy(b.resize,b)),a("[draggable!=true]",b.$slideTrack).on("dragstart",b.preventDefault),a(window).on("load.slick.slick-"+b.instanceUid,b.setPosition),a(document).on("ready.slick.slick-"+b.instanceUid,b.setPosition)},b.prototype.initUI=function(){var a=this;a.options.arrows===!0&&a.slideCount>a.options.slidesToShow&&(a.$prevArrow.show(),a.$nextArrow.show()),a.options.dots===!0&&a.slideCount>a.options.slidesToShow&&a.$dots.show(),a.options.autoplay===!0&&a.autoPlay()},b.prototype.keyHandler=function(a){var b=this;a.target.tagName.match("TEXTAREA|INPUT|SELECT")||(37===a.keyCode&&b.options.accessibility===!0?b.changeSlide({data:{message:"previous"}}):39===a.keyCode&&b.options.accessibility===!0&&b.changeSlide({data:{message:"next"}}))},b.prototype.lazyLoad=function(){function g(b){a("img[data-lazy]",b).each(function(){var b=a(this),c=a(this).attr("data-lazy"),d=document.createElement("img");d.onload=function(){b.animate({opacity:0},100,function(){b.attr("src",c).animate({opacity:1},200,function(){b.removeAttr("data-lazy").removeClass("slick-loading")})})},d.src=c})}var c,d,e,f,b=this;b.options.centerMode===!0?b.options.infinite===!0?(e=b.currentSlide+(b.options.slidesToShow/2+1),f=e+b.options.slidesToShow+2):(e=Math.max(0,b.currentSlide-(b.options.slidesToShow/2+1)),f=2+(b.options.slidesToShow/2+1)+b.currentSlide):(e=b.options.infinite?b.options.slidesToShow+b.currentSlide:b.currentSlide,f=e+b.options.slidesToShow,b.options.fade===!0&&(e>0&&e--,f<=b.slideCount&&f++)),c=b.$slider.find(".slick-slide").slice(e,f),g(c),b.slideCount<=b.options.slidesToShow?(d=b.$slider.find(".slick-slide"),g(d)):b.currentSlide>=b.slideCount-b.options.slidesToShow?(d=b.$slider.find(".slick-cloned").slice(0,b.options.slidesToShow),g(d)):0===b.currentSlide&&(d=b.$slider.find(".slick-cloned").slice(-1*b.options.slidesToShow),g(d))},b.prototype.loadSlider=function(){var a=this;a.setPosition(),a.$slideTrack.css({opacity:1}),a.$slider.removeClass("slick-loading"),a.initUI(),"progressive"===a.options.lazyLoad&&a.progressiveLazyLoad()},b.prototype.next=b.prototype.slickNext=function(){var a=this;a.changeSlide({data:{message:"next"}})},b.prototype.orientationChange=function(){var a=this;a.checkResponsive(),a.setPosition()},b.prototype.pause=b.prototype.slickPause=function(){var a=this;a.autoPlayClear(),a.paused=!0},b.prototype.play=b.prototype.slickPlay=function(){var a=this;a.paused=!1,a.autoPlay()},b.prototype.postSlide=function(a){var b=this;b.$slider.trigger("afterChange",[b,a]),b.animating=!1,b.setPosition(),b.swipeLeft=null,b.options.autoplay===!0&&b.paused===!1&&b.autoPlay(),b.options.accessibility===!0&&b.initADA()},b.prototype.prev=b.prototype.slickPrev=function(){var a=this;a.changeSlide({data:{message:"previous"}})},b.prototype.preventDefault=function(a){a.preventDefault()},b.prototype.progressiveLazyLoad=function(){var c,d,b=this;c=a("img[data-lazy]",b.$slider).length,c>0&&(d=a("img[data-lazy]",b.$slider).first(),d.attr("src",null),d.attr("src",d.attr("data-lazy")).removeClass("slick-loading").load(function(){d.removeAttr("data-lazy"),b.progressiveLazyLoad(),b.options.adaptiveHeight===!0&&b.setPosition()}).error(function(){d.removeAttr("data-lazy"),b.progressiveLazyLoad()}))},b.prototype.refresh=function(b){var d,e,c=this;e=c.slideCount-c.options.slidesToShow,c.options.infinite||(c.slideCount<=c.options.slidesToShow?c.currentSlide=0:c.currentSlide>e&&(c.currentSlide=e)),d=c.currentSlide,c.destroy(!0),a.extend(c,c.initials,{currentSlide:d}),c.init(),b||c.changeSlide({data:{message:"index",index:d}},!1)},b.prototype.registerBreakpoints=function(){var c,d,e,b=this,f=b.options.responsive||null;if("array"===a.type(f)&&f.length){b.respondTo=b.options.respondTo||"window";for(c in f)if(e=b.breakpoints.length-1,d=f[c].breakpoint,f.hasOwnProperty(c)){for(;e>=0;)b.breakpoints[e]&&b.breakpoints[e]===d&&b.breakpoints.splice(e,1),e--;b.breakpoints.push(d),b.breakpointSettings[d]=f[c].settings}b.breakpoints.sort(function(a,c){return b.options.mobileFirst?a-c:c-a})}},b.prototype.reinit=function(){var b=this;b.$slides=b.$slideTrack.children(b.options.slide).addClass("slick-slide"),b.slideCount=b.$slides.length,b.currentSlide>=b.slideCount&&0!==b.currentSlide&&(b.currentSlide=b.currentSlide-b.options.slidesToScroll),b.slideCount<=b.options.slidesToShow&&(b.currentSlide=0),b.registerBreakpoints(),b.setProps(),b.setupInfinite(),b.buildArrows(),b.updateArrows(),b.initArrowEvents(),b.buildDots(),b.updateDots(),b.initDotEvents(),b.checkResponsive(!1,!0),b.options.focusOnSelect===!0&&a(b.$slideTrack).children().on("click.slick",b.selectHandler),b.setSlideClasses(0),b.setPosition(),b.$slider.trigger("reInit",[b]),b.options.autoplay===!0&&b.focusHandler()},b.prototype.resize=function(){var b=this;a(window).width()!==b.windowWidth&&(clearTimeout(b.windowDelay),b.windowDelay=window.setTimeout(function(){b.windowWidth=a(window).width(),b.checkResponsive(),b.unslicked||b.setPosition()},50))},b.prototype.removeSlide=b.prototype.slickRemove=function(a,b,c){var d=this;return"boolean"==typeof a?(b=a,a=b===!0?0:d.slideCount-1):a=b===!0?--a:a,d.slideCount<1||0>a||a>d.slideCount-1?!1:(d.unload(),c===!0?d.$slideTrack.children().remove():d.$slideTrack.children(this.options.slide).eq(a).remove(),d.$slides=d.$slideTrack.children(this.options.slide),d.$slideTrack.children(this.options.slide).detach(),d.$slideTrack.append(d.$slides),d.$slidesCache=d.$slides,void d.reinit())},b.prototype.setCSS=function(a){var d,e,b=this,c={};b.options.rtl===!0&&(a=-a),d="left"==b.positionProp?Math.ceil(a)+"px":"0px",e="top"==b.positionProp?Math.ceil(a)+"px":"0px",c[b.positionProp]=a,b.transformsEnabled===!1?b.$slideTrack.css(c):(c={},b.cssTransitions===!1?(c[b.animType]="translate("+d+", "+e+")",b.$slideTrack.css(c)):(c[b.animType]="translate3d("+d+", "+e+", 0px)",b.$slideTrack.css(c)))},b.prototype.setDimensions=function(){var a=this;a.options.vertical===!1?a.options.centerMode===!0&&a.$list.css({padding:"0px "+a.options.centerPadding}):(a.$list.height(a.$slides.first().outerHeight(!0)*a.options.slidesToShow),a.options.centerMode===!0&&a.$list.css({padding:a.options.centerPadding+" 0px"})),a.listWidth=a.$list.width(),a.listHeight=a.$list.height(),a.options.vertical===!1&&a.options.variableWidth===!1?(a.slideWidth=Math.ceil(a.listWidth/a.options.slidesToShow),a.$slideTrack.width(Math.ceil(a.slideWidth*a.$slideTrack.children(".slick-slide").length))):a.options.variableWidth===!0?a.$slideTrack.width(5e3*a.slideCount):(a.slideWidth=Math.ceil(a.listWidth),a.$slideTrack.height(Math.ceil(a.$slides.first().outerHeight(!0)*a.$slideTrack.children(".slick-slide").length)));var b=a.$slides.first().outerWidth(!0)-a.$slides.first().width();a.options.variableWidth===!1&&a.$slideTrack.children(".slick-slide").width(a.slideWidth-b)},b.prototype.setFade=function(){var c,b=this;b.$slides.each(function(d,e){c=b.slideWidth*d*-1,b.options.rtl===!0?a(e).css({position:"relative",right:c,top:0,zIndex:b.options.zIndex-2,opacity:0}):a(e).css({position:"relative",left:c,top:0,zIndex:b.options.zIndex-2,opacity:0})}),b.$slides.eq(b.currentSlide).css({zIndex:b.options.zIndex-1,opacity:1})},b.prototype.setHeight=function(){var a=this;if(1===a.options.slidesToShow&&a.options.adaptiveHeight===!0&&a.options.vertical===!1){var b=a.$slides.eq(a.currentSlide).outerHeight(!0);a.$list.css("height",b)}},b.prototype.setOption=b.prototype.slickSetOption=function(b,c,d){var f,g,e=this;if("responsive"===b&&"array"===a.type(c))for(g in c)if("array"!==a.type(e.options.responsive))e.options.responsive=[c[g]];else{for(f=e.options.responsive.length-1;f>=0;)e.options.responsive[f].breakpoint===c[g].breakpoint&&e.options.responsive.splice(f,1),f--;e.options.responsive.push(c[g])}else e.options[b]=c;d===!0&&(e.unload(),e.reinit())},b.prototype.setPosition=function(){var a=this;a.setDimensions(),a.setHeight(),a.options.fade===!1?a.setCSS(a.getLeft(a.currentSlide)):a.setFade(),a.$slider.trigger("setPosition",[a])},b.prototype.setProps=function(){var a=this,b=document.body.style;a.positionProp=a.options.vertical===!0?"top":"left","top"===a.positionProp?a.$slider.addClass("slick-vertical"):a.$slider.removeClass("slick-vertical"),(void 0!==b.WebkitTransition||void 0!==b.MozTransition||void 0!==b.msTransition)&&a.options.useCSS===!0&&(a.cssTransitions=!0),a.options.fade&&("number"==typeof a.options.zIndex?a.options.zIndex<3&&(a.options.zIndex=3):a.options.zIndex=a.defaults.zIndex),void 0!==b.OTransform&&(a.animType="OTransform",a.transformType="-o-transform",a.transitionType="OTransition",void 0===b.perspectiveProperty&&void 0===b.webkitPerspective&&(a.animType=!1)),void 0!==b.MozTransform&&(a.animType="MozTransform",a.transformType="-moz-transform",a.transitionType="MozTransition",void 0===b.perspectiveProperty&&void 0===b.MozPerspective&&(a.animType=!1)),void 0!==b.webkitTransform&&(a.animType="webkitTransform",a.transformType="-webkit-transform",a.transitionType="webkitTransition",void 0===b.perspectiveProperty&&void 0===b.webkitPerspective&&(a.animType=!1)),void 0!==b.msTransform&&(a.animType="msTransform",a.transformType="-ms-transform",a.transitionType="msTransition",void 0===b.msTransform&&(a.animType=!1)),void 0!==b.transform&&a.animType!==!1&&(a.animType="transform",a.transformType="transform",a.transitionType="transition"),a.transformsEnabled=a.options.useTransform&&null!==a.animType&&a.animType!==!1},b.prototype.setSlideClasses=function(a){var c,d,e,f,b=this;d=b.$slider.find(".slick-slide").removeClass("slick-active slick-center slick-current").attr("aria-hidden","true"),b.$slides.eq(a).addClass("slick-current"),b.options.centerMode===!0?(c=Math.floor(b.options.slidesToShow/2),b.options.infinite===!0&&(a>=c&&a<=b.slideCount-1-c?b.$slides.slice(a-c,a+c+1).addClass("slick-active").attr("aria-hidden","false"):(e=b.options.slidesToShow+a,d.slice(e-c+1,e+c+2).addClass("slick-active").attr("aria-hidden","false")),0===a?d.eq(d.length-1-b.options.slidesToShow).addClass("slick-center"):a===b.slideCount-1&&d.eq(b.options.slidesToShow).addClass("slick-center")),b.$slides.eq(a).addClass("slick-center")):a>=0&&a<=b.slideCount-b.options.slidesToShow?b.$slides.slice(a,a+b.options.slidesToShow).addClass("slick-active").attr("aria-hidden","false"):d.length<=b.options.slidesToShow?d.addClass("slick-active").attr("aria-hidden","false"):(f=b.slideCount%b.options.slidesToShow,e=b.options.infinite===!0?b.options.slidesToShow+a:a,b.options.slidesToShow==b.options.slidesToScroll&&b.slideCount-a<b.options.slidesToShow?d.slice(e-(b.options.slidesToShow-f),e+f).addClass("slick-active").attr("aria-hidden","false"):d.slice(e,e+b.options.slidesToShow).addClass("slick-active").attr("aria-hidden","false")),"ondemand"===b.options.lazyLoad&&b.lazyLoad()},b.prototype.setupInfinite=function(){var c,d,e,b=this;if(b.options.fade===!0&&(b.options.centerMode=!1),b.options.infinite===!0&&b.options.fade===!1&&(d=null,b.slideCount>b.options.slidesToShow)){for(e=b.options.centerMode===!0?b.options.slidesToShow+1:b.options.slidesToShow,c=b.slideCount;c>b.slideCount-e;c-=1)d=c-1,a(b.$slides[d]).clone(!0).attr("id","").attr("data-slick-index",d-b.slideCount).prependTo(b.$slideTrack).addClass("slick-cloned");for(c=0;e>c;c+=1)d=c,a(b.$slides[d]).clone(!0).attr("id","").attr("data-slick-index",d+b.slideCount).appendTo(b.$slideTrack).addClass("slick-cloned");b.$slideTrack.find(".slick-cloned").find("[id]").each(function(){a(this).attr("id","")})}},b.prototype.setPaused=function(a){var b=this;b.options.autoplay===!0&&b.options.pauseOnHover===!0&&(b.paused=a,a?b.autoPlayClear():b.autoPlay())},b.prototype.selectHandler=function(b){var c=this,d=a(b.target).is(".slick-slide")?a(b.target):a(b.target).parents(".slick-slide"),e=parseInt(d.attr("data-slick-index"));return e||(e=0),c.slideCount<=c.options.slidesToShow?(c.setSlideClasses(e),void c.asNavFor(e)):void c.slideHandler(e)},b.prototype.slideHandler=function(a,b,c){var d,e,f,g,h=null,i=this;return b=b||!1,i.animating===!0&&i.options.waitForAnimate===!0||i.options.fade===!0&&i.currentSlide===a||i.slideCount<=i.options.slidesToShow?void 0:(b===!1&&i.asNavFor(a),d=a,h=i.getLeft(d),g=i.getLeft(i.currentSlide),i.currentLeft=null===i.swipeLeft?g:i.swipeLeft,i.options.infinite===!1&&i.options.centerMode===!1&&(0>a||a>i.getDotCount()*i.options.slidesToScroll)?void(i.options.fade===!1&&(d=i.currentSlide,c!==!0?i.animateSlide(g,function(){i.postSlide(d);
}):i.postSlide(d))):i.options.infinite===!1&&i.options.centerMode===!0&&(0>a||a>i.slideCount-i.options.slidesToScroll)?void(i.options.fade===!1&&(d=i.currentSlide,c!==!0?i.animateSlide(g,function(){i.postSlide(d)}):i.postSlide(d))):(i.options.autoplay===!0&&clearInterval(i.autoPlayTimer),e=0>d?i.slideCount%i.options.slidesToScroll!==0?i.slideCount-i.slideCount%i.options.slidesToScroll:i.slideCount+d:d>=i.slideCount?i.slideCount%i.options.slidesToScroll!==0?0:d-i.slideCount:d,i.animating=!0,i.$slider.trigger("beforeChange",[i,i.currentSlide,e]),f=i.currentSlide,i.currentSlide=e,i.setSlideClasses(i.currentSlide),i.updateDots(),i.updateArrows(),i.options.fade===!0?(c!==!0?(i.fadeSlideOut(f),i.fadeSlide(e,function(){i.postSlide(e)})):i.postSlide(e),void i.animateHeight()):void(c!==!0?i.animateSlide(h,function(){i.postSlide(e)}):i.postSlide(e))))},b.prototype.startLoad=function(){var a=this;a.options.arrows===!0&&a.slideCount>a.options.slidesToShow&&(a.$prevArrow.hide(),a.$nextArrow.hide()),a.options.dots===!0&&a.slideCount>a.options.slidesToShow&&a.$dots.hide(),a.$slider.addClass("slick-loading")},b.prototype.swipeDirection=function(){var a,b,c,d,e=this;return a=e.touchObject.startX-e.touchObject.curX,b=e.touchObject.startY-e.touchObject.curY,c=Math.atan2(b,a),d=Math.round(180*c/Math.PI),0>d&&(d=360-Math.abs(d)),45>=d&&d>=0?e.options.rtl===!1?"left":"right":360>=d&&d>=315?e.options.rtl===!1?"left":"right":d>=135&&225>=d?e.options.rtl===!1?"right":"left":e.options.verticalSwiping===!0?d>=35&&135>=d?"left":"right":"vertical"},b.prototype.swipeEnd=function(a){var c,b=this;if(b.dragging=!1,b.shouldClick=b.touchObject.swipeLength>10?!1:!0,void 0===b.touchObject.curX)return!1;if(b.touchObject.edgeHit===!0&&b.$slider.trigger("edge",[b,b.swipeDirection()]),b.touchObject.swipeLength>=b.touchObject.minSwipe)switch(b.swipeDirection()){case"left":c=b.options.swipeToSlide?b.checkNavigable(b.currentSlide+b.getSlideCount()):b.currentSlide+b.getSlideCount(),b.slideHandler(c),b.currentDirection=0,b.touchObject={},b.$slider.trigger("swipe",[b,"left"]);break;case"right":c=b.options.swipeToSlide?b.checkNavigable(b.currentSlide-b.getSlideCount()):b.currentSlide-b.getSlideCount(),b.slideHandler(c),b.currentDirection=1,b.touchObject={},b.$slider.trigger("swipe",[b,"right"])}else b.touchObject.startX!==b.touchObject.curX&&(b.slideHandler(b.currentSlide),b.touchObject={})},b.prototype.swipeHandler=function(a){var b=this;if(!(b.options.swipe===!1||"ontouchend"in document&&b.options.swipe===!1||b.options.draggable===!1&&-1!==a.type.indexOf("mouse")))switch(b.touchObject.fingerCount=a.originalEvent&&void 0!==a.originalEvent.touches?a.originalEvent.touches.length:1,b.touchObject.minSwipe=b.listWidth/b.options.touchThreshold,b.options.verticalSwiping===!0&&(b.touchObject.minSwipe=b.listHeight/b.options.touchThreshold),a.data.action){case"start":b.swipeStart(a);break;case"move":b.swipeMove(a);break;case"end":b.swipeEnd(a)}},b.prototype.swipeMove=function(a){var d,e,f,g,h,b=this;return h=void 0!==a.originalEvent?a.originalEvent.touches:null,!b.dragging||h&&1!==h.length?!1:(d=b.getLeft(b.currentSlide),b.touchObject.curX=void 0!==h?h[0].pageX:a.clientX,b.touchObject.curY=void 0!==h?h[0].pageY:a.clientY,b.touchObject.swipeLength=Math.round(Math.sqrt(Math.pow(b.touchObject.curX-b.touchObject.startX,2))),b.options.verticalSwiping===!0&&(b.touchObject.swipeLength=Math.round(Math.sqrt(Math.pow(b.touchObject.curY-b.touchObject.startY,2)))),e=b.swipeDirection(),"vertical"!==e?(void 0!==a.originalEvent&&b.touchObject.swipeLength>4&&a.preventDefault(),g=(b.options.rtl===!1?1:-1)*(b.touchObject.curX>b.touchObject.startX?1:-1),b.options.verticalSwiping===!0&&(g=b.touchObject.curY>b.touchObject.startY?1:-1),f=b.touchObject.swipeLength,b.touchObject.edgeHit=!1,b.options.infinite===!1&&(0===b.currentSlide&&"right"===e||b.currentSlide>=b.getDotCount()&&"left"===e)&&(f=b.touchObject.swipeLength*b.options.edgeFriction,b.touchObject.edgeHit=!0),b.options.vertical===!1?b.swipeLeft=d+f*g:b.swipeLeft=d+f*(b.$list.height()/b.listWidth)*g,b.options.verticalSwiping===!0&&(b.swipeLeft=d+f*g),b.options.fade===!0||b.options.touchMove===!1?!1:b.animating===!0?(b.swipeLeft=null,!1):void b.setCSS(b.swipeLeft)):void 0)},b.prototype.swipeStart=function(a){var c,b=this;return 1!==b.touchObject.fingerCount||b.slideCount<=b.options.slidesToShow?(b.touchObject={},!1):(void 0!==a.originalEvent&&void 0!==a.originalEvent.touches&&(c=a.originalEvent.touches[0]),b.touchObject.startX=b.touchObject.curX=void 0!==c?c.pageX:a.clientX,b.touchObject.startY=b.touchObject.curY=void 0!==c?c.pageY:a.clientY,void(b.dragging=!0))},b.prototype.unfilterSlides=b.prototype.slickUnfilter=function(){var a=this;null!==a.$slidesCache&&(a.unload(),a.$slideTrack.children(this.options.slide).detach(),a.$slidesCache.appendTo(a.$slideTrack),a.reinit())},b.prototype.unload=function(){var b=this;a(".slick-cloned",b.$slider).remove(),b.$dots&&b.$dots.remove(),b.$prevArrow&&b.htmlExpr.test(b.options.prevArrow)&&b.$prevArrow.remove(),b.$nextArrow&&b.htmlExpr.test(b.options.nextArrow)&&b.$nextArrow.remove(),b.$slides.removeClass("slick-slide slick-active slick-visible slick-current").attr("aria-hidden","true").css("width","")},b.prototype.unslick=function(a){var b=this;b.$slider.trigger("unslick",[b,a]),b.destroy()},b.prototype.updateArrows=function(){var b,a=this;b=Math.floor(a.options.slidesToShow/2),a.options.arrows===!0&&a.slideCount>a.options.slidesToShow&&!a.options.infinite&&(a.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false"),a.$nextArrow.removeClass("slick-disabled").attr("aria-disabled","false"),0===a.currentSlide?(a.$prevArrow.addClass("slick-disabled").attr("aria-disabled","true"),a.$nextArrow.removeClass("slick-disabled").attr("aria-disabled","false")):a.currentSlide>=a.slideCount-a.options.slidesToShow&&a.options.centerMode===!1?(a.$nextArrow.addClass("slick-disabled").attr("aria-disabled","true"),a.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false")):a.currentSlide>=a.slideCount-1&&a.options.centerMode===!0&&(a.$nextArrow.addClass("slick-disabled").attr("aria-disabled","true"),a.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false")))},b.prototype.updateDots=function(){var a=this;null!==a.$dots&&(a.$dots.find("li").removeClass("slick-active").attr("aria-hidden","true"),a.$dots.find("li").eq(Math.floor(a.currentSlide/a.options.slidesToScroll)).addClass("slick-active").attr("aria-hidden","false"))},b.prototype.visibility=function(){var a=this;document[a.hidden]?(a.paused=!0,a.autoPlayClear()):a.options.autoplay===!0&&(a.paused=!1,a.autoPlay())},b.prototype.initADA=function(){var b=this;b.$slides.add(b.$slideTrack.find(".slick-cloned")).attr({"aria-hidden":"true",tabindex:"-1"}).find("a, input, button, select").attr({tabindex:"-1"}),b.$slideTrack.attr("role","listbox"),b.$slides.not(b.$slideTrack.find(".slick-cloned")).each(function(c){a(this).attr({role:"option","aria-describedby":"slick-slide"+b.instanceUid+c})}),null!==b.$dots&&b.$dots.attr("role","tablist").find("li").each(function(c){a(this).attr({role:"presentation","aria-selected":"false","aria-controls":"navigation"+b.instanceUid+c,id:"slick-slide"+b.instanceUid+c})}).first().attr("aria-selected","true").end().find("button").attr("role","button").end().closest("div").attr("role","toolbar"),b.activateADA()},b.prototype.activateADA=function(){var a=this;a.$slideTrack.find(".slick-active").attr({"aria-hidden":"false"}).find("a, input, button, select").attr({tabindex:"0"})},b.prototype.focusHandler=function(){var b=this;b.$slider.on("focus.slick blur.slick","*",function(c){c.stopImmediatePropagation();var d=a(this);setTimeout(function(){b.isPlay&&(d.is(":focus")?(b.autoPlayClear(),b.paused=!0):(b.paused=!1,b.autoPlay()))},0)})},a.fn.slick=function(){var f,g,a=this,c=arguments[0],d=Array.prototype.slice.call(arguments,1),e=a.length;for(f=0;e>f;f++)if("object"==typeof c||"undefined"==typeof c?a[f].slick=new b(a[f],c):g=a[f].slick[c].apply(a[f].slick,d),"undefined"!=typeof g)return g;return a}});

/*!
 * jScroll - jQuery Plugin for Infinite Scrolling / Auto-Paging
 * http://jscroll.com/
 */
!function(a){"use strict";a.jscroll={defaults:{debug:!1,autoTrigger:!0,autoTriggerUntil:!1,loadingHtml:"<small>Loading...</small>",padding:0,nextSelector:"a:last",contentSelector:"",pagingSelector:"",callback:!1}};var b=function(b,c){var d=b.data("jscroll"),e="function"==typeof c?{callback:c}:c,f=a.extend({},a.jscroll.defaults,e,d||{}),g="visible"===b.css("overflow-y"),h=b.find(f.nextSelector).first(),i=a(window),j=a("body"),k=g?i:b,l=a.trim(h.attr("href")+" "+f.contentSelector),m=function(){var b=a(f.loadingHtml).filter("img").attr("src");if(b){var c=new Image;c.src=b}},n=function(){b.find(".jscroll-inner").length||b.contents().wrapAll('<div class="jscroll-inner" />')},o=function(a){var b;f.pagingSelector?a.closest(f.pagingSelector).hide():(b=a.parent().not(".jscroll-inner,.jscroll-added").addClass("jscroll-next-parent").hide(),b.length||a.wrap('<div class="jscroll-next-parent" />').parent().hide())},p=function(){return k.unbind(".jscroll").removeData("jscroll").find(".jscroll-inner").children().unwrap().filter(".jscroll-added").children().unwrap()},q=function(){n();var a=b.find("div.jscroll-inner").first(),c=b.data("jscroll"),d=parseInt(b.css("borderTopWidth"),10),e=isNaN(d)?0:d,h=parseInt(b.css("paddingTop"),10)+e,i=g?k.scrollTop():b.offset().top,j=a.length?a.offset().top:0,l=Math.ceil(i-j+k.height()+h);return!c.waiting&&l+f.padding>=a.outerHeight()?(u("info","jScroll:",a.outerHeight()-l,"from bottom. Loading next request..."),t()):void 0},r=function(a){return a=a||b.data("jscroll"),a&&a.nextHref?(s(),!0):(u("warn","jScroll: nextSelector not found - destroying"),p(),!1)},s=function(){var a=b.find(f.nextSelector).first();a.length&&(f.autoTrigger&&(f.autoTriggerUntil===!1||f.autoTriggerUntil>0)?(o(a),j.height()<=i.height()&&q(),k.unbind(".jscroll").bind("scroll.jscroll",function(){return q()}),f.autoTriggerUntil>0&&f.autoTriggerUntil--):(k.unbind(".jscroll"),a.bind("click.jscroll",function(){return o(a),t(),!1})))},t=function(){var c=b.find("div.jscroll-inner").first(),d=b.data("jscroll");return d.waiting=!0,c.append('<div class="jscroll-added" />').children(".jscroll-added").last().html('<div class="jscroll-loading">'+f.loadingHtml+"</div>"),b.animate({scrollTop:c.outerHeight()},0,function(){c.find("div.jscroll-added").last().load(d.nextHref,function(c,e){if("error"===e)return p();var g=a(this).find(f.nextSelector).first();d.waiting=!1,d.nextHref=g.attr("href")?a.trim(g.attr("href")+" "+f.contentSelector):!1,a(".jscroll-next-parent",b).remove(),r(),f.callback&&f.callback.call(this),u("dir",d)})})},u=function(a){if(f.debug&&"object"==typeof console&&("object"==typeof a||"function"==typeof console[a]))if("object"==typeof a){var b=[];for(var c in a)"function"==typeof console[c]?(b=a[c].length?a[c]:[a[c]],console[c].apply(console,b)):console.log.apply(console,b)}else console[a].apply(console,Array.prototype.slice.call(arguments,1))};return b.data("jscroll",a.extend({},d,{initialized:!0,waiting:!1,nextHref:l})),n(),m(),s(),a.extend(b.jscroll,{destroy:p}),b};a.fn.jscroll=function(c){return this.each(function(){var d,e=a(this),f=e.data("jscroll");f&&f.initialized||(d=new b(e,c))})}}(jQuery);
